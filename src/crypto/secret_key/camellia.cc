/*!
 * cryptography library
 *
 * Copyright (c) 2022 tako
 *
 * This software is released under the MIT license.
 * see https://opensource.org/licenses/MIT
 */

#include "crypto/secret_key/camellia.h"
#include "common/bit.h"
#include "common/endian.h"

namespace cryptography {

#define CAMELLIA_128_KEY_BYTE_SIZE                 16
#define CAMELLIA_192_KEY_BYTE_SIZE                 24
#define CAMELLIA_256_KEY_BYTE_SIZE                 32

#define SGM1                                       0xA09E667F3BCC908B
#define SGM2                                       0xB67AE8584CAA73B2
#define SGM3                                       0xC6EF372FE94F82BE
#define SGM4                                       0x54FF53A5F1D36F1C
#define SGM5                                       0x10E527FADE682D1D
#define SGM6                                       0xB05688C2B3E6C1FD

#define CAMELLIA_ROTATE_LEFT128(src, dst, shift)   dst[0] = src[0] << shift | src[1] >> (64 - shift); \
                                                   dst[1] = src[1] << shift | src[0] >> (64 - shift);

#if defined(_MSC_VER)
# define BSWAP64(x)             _byteswap_uint64((x))
#elif defined(__GNUC__)
# define BSWAP64(x)             __builtin_bswap64(x)
#endif

#if defined(__LITTLE_ENDIAN__)
# define BENDIAN_64BIT_TO_8BIT_SIZE128(in, out)  in[0] = BSWAP64(in[0]); \
                                                 in[1] = BSWAP64(in[1]); \
                                                 memcpy(out, in, 16);

# define BENDIAN_8BIT_TO_64BIT_SIZE128(in, out)  memcpy(out, in, 16);      \
                                                 out[0] = BSWAP64(out[0]); \
                                                 out[1] = BSWAP64(out[1]);

# define BENDIAN_8BIT_TO_64BIT_SIZE192(in, out)  memcpy(out, in, 24);      \
                                                 out[0] = BSWAP64(out[0]); \
                                                 out[1] = BSWAP64(out[1]); \
                                                 out[2] = BSWAP64(out[2]);

# define BENDIAN_8BIT_TO_64BIT_SIZE256(in, out)  memcpy(out, in, 32);      \
                                                 out[0] = BSWAP64(out[0]); \
                                                 out[1] = BSWAP64(out[1]); \
                                                 out[2] = BSWAP64(out[2]); \
                                                 out[3] = BSWAP64(out[3]);

#elif defined(__BIG_ENDIAN__)
# define BENDIAN_64BIT_TO_8BIT_SIZE128(in, out)  memcpy(out, in, 16);
# define BENDIAN_8BIT_TO_64BIT_SIZE128(in, out)  memcpy(out, in, 16);
# define BENDIAN_8BIT_TO_64BIT_SIZE192(in, out)  memcpy(out, in, 24);
# define BENDIAN_8BIT_TO_64BIT_SIZE256(in, out)  memcpy(out, in, 32);
#endif

#if defined(SPEED_PRIORITY_CAMELLIA)
static const uint64_t sp64bit1[256] = {
  0x7070700070000070, 0x8282820082000082, 0x2c2c2c002c00002c, 0xececec00ec0000ec,
  0xb3b3b300b30000b3, 0x2727270027000027, 0xc0c0c000c00000c0, 0xe5e5e500e50000e5,
  0xe4e4e400e40000e4, 0x8585850085000085, 0x5757570057000057, 0x3535350035000035,
  0xeaeaea00ea0000ea, 0x0c0c0c000c00000c, 0xaeaeae00ae0000ae, 0x4141410041000041,
  0x2323230023000023, 0xefefef00ef0000ef, 0x6b6b6b006b00006b, 0x9393930093000093,
  0x4545450045000045, 0x1919190019000019, 0xa5a5a500a50000a5, 0x2121210021000021,
  0xededed00ed0000ed, 0x0e0e0e000e00000e, 0x4f4f4f004f00004f, 0x4e4e4e004e00004e,
  0x1d1d1d001d00001d, 0x6565650065000065, 0x9292920092000092, 0xbdbdbd00bd0000bd,
  0x8686860086000086, 0xb8b8b800b80000b8, 0xafafaf00af0000af, 0x8f8f8f008f00008f,
  0x7c7c7c007c00007c, 0xebebeb00eb0000eb, 0x1f1f1f001f00001f, 0xcecece00ce0000ce,
  0x3e3e3e003e00003e, 0x3030300030000030, 0xdcdcdc00dc0000dc, 0x5f5f5f005f00005f,
  0x5e5e5e005e00005e, 0xc5c5c500c50000c5, 0x0b0b0b000b00000b, 0x1a1a1a001a00001a,
  0xa6a6a600a60000a6, 0xe1e1e100e10000e1, 0x3939390039000039, 0xcacaca00ca0000ca,
  0xd5d5d500d50000d5, 0x4747470047000047, 0x5d5d5d005d00005d, 0x3d3d3d003d00003d,
  0xd9d9d900d90000d9, 0x0101010001000001, 0x5a5a5a005a00005a, 0xd6d6d600d60000d6,
  0x5151510051000051, 0x5656560056000056, 0x6c6c6c006c00006c, 0x4d4d4d004d00004d,
  0x8b8b8b008b00008b, 0x0d0d0d000d00000d, 0x9a9a9a009a00009a, 0x6666660066000066,
  0xfbfbfb00fb0000fb, 0xcccccc00cc0000cc, 0xb0b0b000b00000b0, 0x2d2d2d002d00002d,
  0x7474740074000074, 0x1212120012000012, 0x2b2b2b002b00002b, 0x2020200020000020,
  0xf0f0f000f00000f0, 0xb1b1b100b10000b1, 0x8484840084000084, 0x9999990099000099,
  0xdfdfdf00df0000df, 0x4c4c4c004c00004c, 0xcbcbcb00cb0000cb, 0xc2c2c200c20000c2,
  0x3434340034000034, 0x7e7e7e007e00007e, 0x7676760076000076, 0x0505050005000005,
  0x6d6d6d006d00006d, 0xb7b7b700b70000b7, 0xa9a9a900a90000a9, 0x3131310031000031,
  0xd1d1d100d10000d1, 0x1717170017000017, 0x0404040004000004, 0xd7d7d700d70000d7,
  0x1414140014000014, 0x5858580058000058, 0x3a3a3a003a00003a, 0x6161610061000061,
  0xdedede00de0000de, 0x1b1b1b001b00001b, 0x1111110011000011, 0x1c1c1c001c00001c,
  0x3232320032000032, 0x0f0f0f000f00000f, 0x9c9c9c009c00009c, 0x1616160016000016,
  0x5353530053000053, 0x1818180018000018, 0xf2f2f200f20000f2, 0x2222220022000022,
  0xfefefe00fe0000fe, 0x4444440044000044, 0xcfcfcf00cf0000cf, 0xb2b2b200b20000b2,
  0xc3c3c300c30000c3, 0xb5b5b500b50000b5, 0x7a7a7a007a00007a, 0x9191910091000091,
  0x2424240024000024, 0x0808080008000008, 0xe8e8e800e80000e8, 0xa8a8a800a80000a8,
  0x6060600060000060, 0xfcfcfc00fc0000fc, 0x6969690069000069, 0x5050500050000050,
  0xaaaaaa00aa0000aa, 0xd0d0d000d00000d0, 0xa0a0a000a00000a0, 0x7d7d7d007d00007d,
  0xa1a1a100a10000a1, 0x8989890089000089, 0x6262620062000062, 0x9797970097000097,
  0x5454540054000054, 0x5b5b5b005b00005b, 0x1e1e1e001e00001e, 0x9595950095000095,
  0xe0e0e000e00000e0, 0xffffff00ff0000ff, 0x6464640064000064, 0xd2d2d200d20000d2,
  0x1010100010000010, 0xc4c4c400c40000c4, 0x0000000000000000, 0x4848480048000048,
  0xa3a3a300a30000a3, 0xf7f7f700f70000f7, 0x7575750075000075, 0xdbdbdb00db0000db,
  0x8a8a8a008a00008a, 0x0303030003000003, 0xe6e6e600e60000e6, 0xdadada00da0000da,
  0x0909090009000009, 0x3f3f3f003f00003f, 0xdddddd00dd0000dd, 0x9494940094000094,
  0x8787870087000087, 0x5c5c5c005c00005c, 0x8383830083000083, 0x0202020002000002,
  0xcdcdcd00cd0000cd, 0x4a4a4a004a00004a, 0x9090900090000090, 0x3333330033000033,
  0x7373730073000073, 0x6767670067000067, 0xf6f6f600f60000f6, 0xf3f3f300f30000f3,
  0x9d9d9d009d00009d, 0x7f7f7f007f00007f, 0xbfbfbf00bf0000bf, 0xe2e2e200e20000e2,
  0x5252520052000052, 0x9b9b9b009b00009b, 0xd8d8d800d80000d8, 0x2626260026000026,
  0xc8c8c800c80000c8, 0x3737370037000037, 0xc6c6c600c60000c6, 0x3b3b3b003b00003b,
  0x8181810081000081, 0x9696960096000096, 0x6f6f6f006f00006f, 0x4b4b4b004b00004b,
  0x1313130013000013, 0xbebebe00be0000be, 0x6363630063000063, 0x2e2e2e002e00002e,
  0xe9e9e900e90000e9, 0x7979790079000079, 0xa7a7a700a70000a7, 0x8c8c8c008c00008c,
  0x9f9f9f009f00009f, 0x6e6e6e006e00006e, 0xbcbcbc00bc0000bc, 0x8e8e8e008e00008e,
  0x2929290029000029, 0xf5f5f500f50000f5, 0xf9f9f900f90000f9, 0xb6b6b600b60000b6,
  0x2f2f2f002f00002f, 0xfdfdfd00fd0000fd, 0xb4b4b400b40000b4, 0x5959590059000059,
  0x7878780078000078, 0x9898980098000098, 0x0606060006000006, 0x6a6a6a006a00006a,
  0xe7e7e700e70000e7, 0x4646460046000046, 0x7171710071000071, 0xbababa00ba0000ba,
  0xd4d4d400d40000d4, 0x2525250025000025, 0xababab00ab0000ab, 0x4242420042000042,
  0x8888880088000088, 0xa2a2a200a20000a2, 0x8d8d8d008d00008d, 0xfafafa00fa0000fa,
  0x7272720072000072, 0x0707070007000007, 0xb9b9b900b90000b9, 0x5555550055000055,
  0xf8f8f800f80000f8, 0xeeeeee00ee0000ee, 0xacacac00ac0000ac, 0x0a0a0a000a00000a,
  0x3636360036000036, 0x4949490049000049, 0x2a2a2a002a00002a, 0x6868680068000068,
  0x3c3c3c003c00003c, 0x3838380038000038, 0xf1f1f100f10000f1, 0xa4a4a400a40000a4,
  0x4040400040000040, 0x2828280028000028, 0xd3d3d300d30000d3, 0x7b7b7b007b00007b,
  0xbbbbbb00bb0000bb, 0xc9c9c900c90000c9, 0x4343430043000043, 0xc1c1c100c10000c1,
  0x1515150015000015, 0xe3e3e300e30000e3, 0xadadad00ad0000ad, 0xf4f4f400f40000f4,
  0x7777770077000077, 0xc7c7c700c70000c7, 0x8080800080000080, 0x9e9e9e009e00009e,
};

static const uint64_t sp64bit2[256] = {
  0x00e0e0e0e0e00000, 0x0005050505050000, 0x0058585858580000, 0x00d9d9d9d9d90000,
  0x0067676767670000, 0x004e4e4e4e4e0000, 0x0081818181810000, 0x00cbcbcbcbcb0000,
  0x00c9c9c9c9c90000, 0x000b0b0b0b0b0000, 0x00aeaeaeaeae0000, 0x006a6a6a6a6a0000,
  0x00d5d5d5d5d50000, 0x0018181818180000, 0x005d5d5d5d5d0000, 0x0082828282820000,
  0x0046464646460000, 0x00dfdfdfdfdf0000, 0x00d6d6d6d6d60000, 0x0027272727270000,
  0x008a8a8a8a8a0000, 0x0032323232320000, 0x004b4b4b4b4b0000, 0x0042424242420000,
  0x00dbdbdbdbdb0000, 0x001c1c1c1c1c0000, 0x009e9e9e9e9e0000, 0x009c9c9c9c9c0000,
  0x003a3a3a3a3a0000, 0x00cacacacaca0000, 0x0025252525250000, 0x007b7b7b7b7b0000,
  0x000d0d0d0d0d0000, 0x0071717171710000, 0x005f5f5f5f5f0000, 0x001f1f1f1f1f0000,
  0x00f8f8f8f8f80000, 0x00d7d7d7d7d70000, 0x003e3e3e3e3e0000, 0x009d9d9d9d9d0000,
  0x007c7c7c7c7c0000, 0x0060606060600000, 0x00b9b9b9b9b90000, 0x00bebebebebe0000,
  0x00bcbcbcbcbc0000, 0x008b8b8b8b8b0000, 0x0016161616160000, 0x0034343434340000,
  0x004d4d4d4d4d0000, 0x00c3c3c3c3c30000, 0x0072727272720000, 0x0095959595950000,
  0x00ababababab0000, 0x008e8e8e8e8e0000, 0x00bababababa0000, 0x007a7a7a7a7a0000,
  0x00b3b3b3b3b30000, 0x0002020202020000, 0x00b4b4b4b4b40000, 0x00adadadadad0000,
  0x00a2a2a2a2a20000, 0x00acacacacac0000, 0x00d8d8d8d8d80000, 0x009a9a9a9a9a0000,
  0x0017171717170000, 0x001a1a1a1a1a0000, 0x0035353535350000, 0x00cccccccccc0000,
  0x00f7f7f7f7f70000, 0x0099999999990000, 0x0061616161610000, 0x005a5a5a5a5a0000,
  0x00e8e8e8e8e80000, 0x0024242424240000, 0x0056565656560000, 0x0040404040400000,
  0x00e1e1e1e1e10000, 0x0063636363630000, 0x0009090909090000, 0x0033333333330000,
  0x00bfbfbfbfbf0000, 0x0098989898980000, 0x0097979797970000, 0x0085858585850000,
  0x0068686868680000, 0x00fcfcfcfcfc0000, 0x00ececececec0000, 0x000a0a0a0a0a0000,
  0x00dadadadada0000, 0x006f6f6f6f6f0000, 0x0053535353530000, 0x0062626262620000,
  0x00a3a3a3a3a30000, 0x002e2e2e2e2e0000, 0x0008080808080000, 0x00afafafafaf0000,
  0x0028282828280000, 0x00b0b0b0b0b00000, 0x0074747474740000, 0x00c2c2c2c2c20000,
  0x00bdbdbdbdbd0000, 0x0036363636360000, 0x0022222222220000, 0x0038383838380000,
  0x0064646464640000, 0x001e1e1e1e1e0000, 0x0039393939390000, 0x002c2c2c2c2c0000,
  0x00a6a6a6a6a60000, 0x0030303030300000, 0x00e5e5e5e5e50000, 0x0044444444440000,
  0x00fdfdfdfdfd0000, 0x0088888888880000, 0x009f9f9f9f9f0000, 0x0065656565650000,
  0x0087878787870000, 0x006b6b6b6b6b0000, 0x00f4f4f4f4f40000, 0x0023232323230000,
  0x0048484848480000, 0x0010101010100000, 0x00d1d1d1d1d10000, 0x0051515151510000,
  0x00c0c0c0c0c00000, 0x00f9f9f9f9f90000, 0x00d2d2d2d2d20000, 0x00a0a0a0a0a00000,
  0x0055555555550000, 0x00a1a1a1a1a10000, 0x0041414141410000, 0x00fafafafafa0000,
  0x0043434343430000, 0x0013131313130000, 0x00c4c4c4c4c40000, 0x002f2f2f2f2f0000,
  0x00a8a8a8a8a80000, 0x00b6b6b6b6b60000, 0x003c3c3c3c3c0000, 0x002b2b2b2b2b0000,
  0x00c1c1c1c1c10000, 0x00ffffffffff0000, 0x00c8c8c8c8c80000, 0x00a5a5a5a5a50000,
  0x0020202020200000, 0x0089898989890000, 0x0000000000000000, 0x0090909090900000,
  0x0047474747470000, 0x00efefefefef0000, 0x00eaeaeaeaea0000, 0x00b7b7b7b7b70000,
  0x0015151515150000, 0x0006060606060000, 0x00cdcdcdcdcd0000, 0x00b5b5b5b5b50000,
  0x0012121212120000, 0x007e7e7e7e7e0000, 0x00bbbbbbbbbb0000, 0x0029292929290000,
  0x000f0f0f0f0f0000, 0x00b8b8b8b8b80000, 0x0007070707070000, 0x0004040404040000,
  0x009b9b9b9b9b0000, 0x0094949494940000, 0x0021212121210000, 0x0066666666660000,
  0x00e6e6e6e6e60000, 0x00cecececece0000, 0x00ededededed0000, 0x00e7e7e7e7e70000,
  0x003b3b3b3b3b0000, 0x00fefefefefe0000, 0x007f7f7f7f7f0000, 0x00c5c5c5c5c50000,
  0x00a4a4a4a4a40000, 0x0037373737370000, 0x00b1b1b1b1b10000, 0x004c4c4c4c4c0000,
  0x0091919191910000, 0x006e6e6e6e6e0000, 0x008d8d8d8d8d0000, 0x0076767676760000,
  0x0003030303030000, 0x002d2d2d2d2d0000, 0x00dedededede0000, 0x0096969696960000,
  0x0026262626260000, 0x007d7d7d7d7d0000, 0x00c6c6c6c6c60000, 0x005c5c5c5c5c0000,
  0x00d3d3d3d3d30000, 0x00f2f2f2f2f20000, 0x004f4f4f4f4f0000, 0x0019191919190000,
  0x003f3f3f3f3f0000, 0x00dcdcdcdcdc0000, 0x0079797979790000, 0x001d1d1d1d1d0000,
  0x0052525252520000, 0x00ebebebebeb0000, 0x00f3f3f3f3f30000, 0x006d6d6d6d6d0000,
  0x005e5e5e5e5e0000, 0x00fbfbfbfbfb0000, 0x0069696969690000, 0x00b2b2b2b2b20000,
  0x00f0f0f0f0f00000, 0x0031313131310000, 0x000c0c0c0c0c0000, 0x00d4d4d4d4d40000,
  0x00cfcfcfcfcf0000, 0x008c8c8c8c8c0000, 0x00e2e2e2e2e20000, 0x0075757575750000,
  0x00a9a9a9a9a90000, 0x004a4a4a4a4a0000, 0x0057575757570000, 0x0084848484840000,
  0x0011111111110000, 0x0045454545450000, 0x001b1b1b1b1b0000, 0x00f5f5f5f5f50000,
  0x00e4e4e4e4e40000, 0x000e0e0e0e0e0000, 0x0073737373730000, 0x00aaaaaaaaaa0000,
  0x00f1f1f1f1f10000, 0x00dddddddddd0000, 0x0059595959590000, 0x0014141414140000,
  0x006c6c6c6c6c0000, 0x0092929292920000, 0x0054545454540000, 0x00d0d0d0d0d00000,
  0x0078787878780000, 0x0070707070700000, 0x00e3e3e3e3e30000, 0x0049494949490000,
  0x0080808080800000, 0x0050505050500000, 0x00a7a7a7a7a70000, 0x00f6f6f6f6f60000,
  0x0077777777770000, 0x0093939393930000, 0x0086868686860000, 0x0083838383830000,
  0x002a2a2a2a2a0000, 0x00c7c7c7c7c70000, 0x005b5b5b5b5b0000, 0x00e9e9e9e9e90000,
  0x00eeeeeeeeee0000, 0x008f8f8f8f8f0000, 0x0001010101010000, 0x003d3d3d3d3d0000,
};

static const uint64_t sp64bit3[256] = {
  0x3800383800383800, 0x4100414100414100, 0x1600161600161600, 0x7600767600767600,
  0xd900d9d900d9d900, 0x9300939300939300, 0x6000606000606000, 0xf200f2f200f2f200,
  0x7200727200727200, 0xc200c2c200c2c200, 0xab00abab00abab00, 0x9a009a9a009a9a00,
  0x7500757500757500, 0x0600060600060600, 0x5700575700575700, 0xa000a0a000a0a000,
  0x9100919100919100, 0xf700f7f700f7f700, 0xb500b5b500b5b500, 0xc900c9c900c9c900,
  0xa200a2a200a2a200, 0x8c008c8c008c8c00, 0xd200d2d200d2d200, 0x9000909000909000,
  0xf600f6f600f6f600, 0x0700070700070700, 0xa700a7a700a7a700, 0x2700272700272700,
  0x8e008e8e008e8e00, 0xb200b2b200b2b200, 0x4900494900494900, 0xde00dede00dede00,
  0x4300434300434300, 0x5c005c5c005c5c00, 0xd700d7d700d7d700, 0xc700c7c700c7c700,
  0x3e003e3e003e3e00, 0xf500f5f500f5f500, 0x8f008f8f008f8f00, 0x6700676700676700,
  0x1f001f1f001f1f00, 0x1800181800181800, 0x6e006e6e006e6e00, 0xaf00afaf00afaf00,
  0x2f002f2f002f2f00, 0xe200e2e200e2e200, 0x8500858500858500, 0x0d000d0d000d0d00,
  0x5300535300535300, 0xf000f0f000f0f000, 0x9c009c9c009c9c00, 0x6500656500656500,
  0xea00eaea00eaea00, 0xa300a3a300a3a300, 0xae00aeae00aeae00, 0x9e009e9e009e9e00,
  0xec00ecec00ecec00, 0x8000808000808000, 0x2d002d2d002d2d00, 0x6b006b6b006b6b00,
  0xa800a8a800a8a800, 0x2b002b2b002b2b00, 0x3600363600363600, 0xa600a6a600a6a600,
  0xc500c5c500c5c500, 0x8600868600868600, 0x4d004d4d004d4d00, 0x3300333300333300,
  0xfd00fdfd00fdfd00, 0x6600666600666600, 0x5800585800585800, 0x9600969600969600,
  0x3a003a3a003a3a00, 0x0900090900090900, 0x9500959500959500, 0x1000101000101000,
  0x7800787800787800, 0xd800d8d800d8d800, 0x4200424200424200, 0xcc00cccc00cccc00,
  0xef00efef00efef00, 0x2600262600262600, 0xe500e5e500e5e500, 0x6100616100616100,
  0x1a001a1a001a1a00, 0x3f003f3f003f3f00, 0x3b003b3b003b3b00, 0x8200828200828200,
  0xb600b6b600b6b600, 0xdb00dbdb00dbdb00, 0xd400d4d400d4d400, 0x9800989800989800,
  0xe800e8e800e8e800, 0x8b008b8b008b8b00, 0x0200020200020200, 0xeb00ebeb00ebeb00,
  0x0a000a0a000a0a00, 0x2c002c2c002c2c00, 0x1d001d1d001d1d00, 0xb000b0b000b0b000,
  0x6f006f6f006f6f00, 0x8d008d8d008d8d00, 0x8800888800888800, 0x0e000e0e000e0e00,
  0x1900191900191900, 0x8700878700878700, 0x4e004e4e004e4e00, 0x0b000b0b000b0b00,
  0xa900a9a900a9a900, 0x0c000c0c000c0c00, 0x7900797900797900, 0x1100111100111100,
  0x7f007f7f007f7f00, 0x2200222200222200, 0xe700e7e700e7e700, 0x5900595900595900,
  0xe100e1e100e1e100, 0xda00dada00dada00, 0x3d003d3d003d3d00, 0xc800c8c800c8c800,
  0x1200121200121200, 0x0400040400040400, 0x7400747400747400, 0x5400545400545400,
  0x3000303000303000, 0x7e007e7e007e7e00, 0xb400b4b400b4b400, 0x2800282800282800,
  0x5500555500555500, 0x6800686800686800, 0x5000505000505000, 0xbe00bebe00bebe00,
  0xd000d0d000d0d000, 0xc400c4c400c4c400, 0x3100313100313100, 0xcb00cbcb00cbcb00,
  0x2a002a2a002a2a00, 0xad00adad00adad00, 0x0f000f0f000f0f00, 0xca00caca00caca00,
  0x7000707000707000, 0xff00ffff00ffff00, 0x3200323200323200, 0x6900696900696900,
  0x0800080800080800, 0x6200626200626200, 0x0000000000000000, 0x2400242400242400,
  0xd100d1d100d1d100, 0xfb00fbfb00fbfb00, 0xba00baba00baba00, 0xed00eded00eded00,
  0x4500454500454500, 0x8100818100818100, 0x7300737300737300, 0x6d006d6d006d6d00,
  0x8400848400848400, 0x9f009f9f009f9f00, 0xee00eeee00eeee00, 0x4a004a4a004a4a00,
  0xc300c3c300c3c300, 0x2e002e2e002e2e00, 0xc100c1c100c1c100, 0x0100010100010100,
  0xe600e6e600e6e600, 0x2500252500252500, 0x4800484800484800, 0x9900999900999900,
  0xb900b9b900b9b900, 0xb300b3b300b3b300, 0x7b007b7b007b7b00, 0xf900f9f900f9f900,
  0xce00cece00cece00, 0xbf00bfbf00bfbf00, 0xdf00dfdf00dfdf00, 0x7100717100717100,
  0x2900292900292900, 0xcd00cdcd00cdcd00, 0x6c006c6c006c6c00, 0x1300131300131300,
  0x6400646400646400, 0x9b009b9b009b9b00, 0x6300636300636300, 0x9d009d9d009d9d00,
  0xc000c0c000c0c000, 0x4b004b4b004b4b00, 0xb700b7b700b7b700, 0xa500a5a500a5a500,
  0x8900898900898900, 0x5f005f5f005f5f00, 0xb100b1b100b1b100, 0x1700171700171700,
  0xf400f4f400f4f400, 0xbc00bcbc00bcbc00, 0xd300d3d300d3d300, 0x4600464600464600,
  0xcf00cfcf00cfcf00, 0x3700373700373700, 0x5e005e5e005e5e00, 0x4700474700474700,
  0x9400949400949400, 0xfa00fafa00fafa00, 0xfc00fcfc00fcfc00, 0x5b005b5b005b5b00,
  0x9700979700979700, 0xfe00fefe00fefe00, 0x5a005a5a005a5a00, 0xac00acac00acac00,
  0x3c003c3c003c3c00, 0x4c004c4c004c4c00, 0x0300030300030300, 0x3500353500353500,
  0xf300f3f300f3f300, 0x2300232300232300, 0xb800b8b800b8b800, 0x5d005d5d005d5d00,
  0x6a006a6a006a6a00, 0x9200929200929200, 0xd500d5d500d5d500, 0x2100212100212100,
  0x4400444400444400, 0x5100515100515100, 0xc600c6c600c6c600, 0x7d007d7d007d7d00,
  0x3900393900393900, 0x8300838300838300, 0xdc00dcdc00dcdc00, 0xaa00aaaa00aaaa00,
  0x7c007c7c007c7c00, 0x7700777700777700, 0x5600565600565600, 0x0500050500050500,
  0x1b001b1b001b1b00, 0xa400a4a400a4a400, 0x1500151500151500, 0x3400343400343400,
  0x1e001e1e001e1e00, 0x1c001c1c001c1c00, 0xf800f8f800f8f800, 0x5200525200525200,
  0x2000202000202000, 0x1400141400141400, 0xe900e9e900e9e900, 0xbd00bdbd00bdbd00,
  0xdd00dddd00dddd00, 0xe400e4e400e4e400, 0xa100a1a100a1a100, 0xe000e0e000e0e000,
  0x8a008a8a008a8a00, 0xf100f1f100f1f100, 0xd600d6d600d6d600, 0x7a007a7a007a7a00,
  0xbb00bbbb00bbbb00, 0xe300e3e300e3e300, 0x4000404000404000, 0x4f004f4f004f4f00,
};

static const uint64_t sp64bit4[256] = {
  0x7070007000007070, 0x2c2c002c00002c2c, 0xb3b300b30000b3b3, 0xc0c000c00000c0c0,
  0xe4e400e40000e4e4, 0x5757005700005757, 0xeaea00ea0000eaea, 0xaeae00ae0000aeae,
  0x2323002300002323, 0x6b6b006b00006b6b, 0x4545004500004545, 0xa5a500a50000a5a5,
  0xeded00ed0000eded, 0x4f4f004f00004f4f, 0x1d1d001d00001d1d, 0x9292009200009292,
  0x8686008600008686, 0xafaf00af0000afaf, 0x7c7c007c00007c7c, 0x1f1f001f00001f1f,
  0x3e3e003e00003e3e, 0xdcdc00dc0000dcdc, 0x5e5e005e00005e5e, 0x0b0b000b00000b0b,
  0xa6a600a60000a6a6, 0x3939003900003939, 0xd5d500d50000d5d5, 0x5d5d005d00005d5d,
  0xd9d900d90000d9d9, 0x5a5a005a00005a5a, 0x5151005100005151, 0x6c6c006c00006c6c,
  0x8b8b008b00008b8b, 0x9a9a009a00009a9a, 0xfbfb00fb0000fbfb, 0xb0b000b00000b0b0,
  0x7474007400007474, 0x2b2b002b00002b2b, 0xf0f000f00000f0f0, 0x8484008400008484,
  0xdfdf00df0000dfdf, 0xcbcb00cb0000cbcb, 0x3434003400003434, 0x7676007600007676,
  0x6d6d006d00006d6d, 0xa9a900a90000a9a9, 0xd1d100d10000d1d1, 0x0404000400000404,
  0x1414001400001414, 0x3a3a003a00003a3a, 0xdede00de0000dede, 0x1111001100001111,
  0x3232003200003232, 0x9c9c009c00009c9c, 0x5353005300005353, 0xf2f200f20000f2f2,
  0xfefe00fe0000fefe, 0xcfcf00cf0000cfcf, 0xc3c300c30000c3c3, 0x7a7a007a00007a7a,
  0x2424002400002424, 0xe8e800e80000e8e8, 0x6060006000006060, 0x6969006900006969,
  0xaaaa00aa0000aaaa, 0xa0a000a00000a0a0, 0xa1a100a10000a1a1, 0x6262006200006262,
  0x5454005400005454, 0x1e1e001e00001e1e, 0xe0e000e00000e0e0, 0x6464006400006464,
  0x1010001000001010, 0x0000000000000000, 0xa3a300a30000a3a3, 0x7575007500007575,
  0x8a8a008a00008a8a, 0xe6e600e60000e6e6, 0x0909000900000909, 0xdddd00dd0000dddd,
  0x8787008700008787, 0x8383008300008383, 0xcdcd00cd0000cdcd, 0x9090009000009090,
  0x7373007300007373, 0xf6f600f60000f6f6, 0x9d9d009d00009d9d, 0xbfbf00bf0000bfbf,
  0x5252005200005252, 0xd8d800d80000d8d8, 0xc8c800c80000c8c8, 0xc6c600c60000c6c6,
  0x8181008100008181, 0x6f6f006f00006f6f, 0x1313001300001313, 0x6363006300006363,
  0xe9e900e90000e9e9, 0xa7a700a70000a7a7, 0x9f9f009f00009f9f, 0xbcbc00bc0000bcbc,
  0x2929002900002929, 0xf9f900f90000f9f9, 0x2f2f002f00002f2f, 0xb4b400b40000b4b4,
  0x7878007800007878, 0x0606000600000606, 0xe7e700e70000e7e7, 0x7171007100007171,
  0xd4d400d40000d4d4, 0xabab00ab0000abab, 0x8888008800008888, 0x8d8d008d00008d8d,
  0x7272007200007272, 0xb9b900b90000b9b9, 0xf8f800f80000f8f8, 0xacac00ac0000acac,
  0x3636003600003636, 0x2a2a002a00002a2a, 0x3c3c003c00003c3c, 0xf1f100f10000f1f1,
  0x4040004000004040, 0xd3d300d30000d3d3, 0xbbbb00bb0000bbbb, 0x4343004300004343,
  0x1515001500001515, 0xadad00ad0000adad, 0x7777007700007777, 0x8080008000008080,
  0x8282008200008282, 0xecec00ec0000ecec, 0x2727002700002727, 0xe5e500e50000e5e5,
  0x8585008500008585, 0x3535003500003535, 0x0c0c000c00000c0c, 0x4141004100004141,
  0xefef00ef0000efef, 0x9393009300009393, 0x1919001900001919, 0x2121002100002121,
  0x0e0e000e00000e0e, 0x4e4e004e00004e4e, 0x6565006500006565, 0xbdbd00bd0000bdbd,
  0xb8b800b80000b8b8, 0x8f8f008f00008f8f, 0xebeb00eb0000ebeb, 0xcece00ce0000cece,
  0x3030003000003030, 0x5f5f005f00005f5f, 0xc5c500c50000c5c5, 0x1a1a001a00001a1a,
  0xe1e100e10000e1e1, 0xcaca00ca0000caca, 0x4747004700004747, 0x3d3d003d00003d3d,
  0x0101000100000101, 0xd6d600d60000d6d6, 0x5656005600005656, 0x4d4d004d00004d4d,
  0x0d0d000d00000d0d, 0x6666006600006666, 0xcccc00cc0000cccc, 0x2d2d002d00002d2d,
  0x1212001200001212, 0x2020002000002020, 0xb1b100b10000b1b1, 0x9999009900009999,
  0x4c4c004c00004c4c, 0xc2c200c20000c2c2, 0x7e7e007e00007e7e, 0x0505000500000505,
  0xb7b700b70000b7b7, 0x3131003100003131, 0x1717001700001717, 0xd7d700d70000d7d7,
  0x5858005800005858, 0x6161006100006161, 0x1b1b001b00001b1b, 0x1c1c001c00001c1c,
  0x0f0f000f00000f0f, 0x1616001600001616, 0x1818001800001818, 0x2222002200002222,
  0x4444004400004444, 0xb2b200b20000b2b2, 0xb5b500b50000b5b5, 0x9191009100009191,
  0x0808000800000808, 0xa8a800a80000a8a8, 0xfcfc00fc0000fcfc, 0x5050005000005050,
  0xd0d000d00000d0d0, 0x7d7d007d00007d7d, 0x8989008900008989, 0x9797009700009797,
  0x5b5b005b00005b5b, 0x9595009500009595, 0xffff00ff0000ffff, 0xd2d200d20000d2d2,
  0xc4c400c40000c4c4, 0x4848004800004848, 0xf7f700f70000f7f7, 0xdbdb00db0000dbdb,
  0x0303000300000303, 0xdada00da0000dada, 0x3f3f003f00003f3f, 0x9494009400009494,
  0x5c5c005c00005c5c, 0x0202000200000202, 0x4a4a004a00004a4a, 0x3333003300003333,
  0x6767006700006767, 0xf3f300f30000f3f3, 0x7f7f007f00007f7f, 0xe2e200e20000e2e2,
  0x9b9b009b00009b9b, 0x2626002600002626, 0x3737003700003737, 0x3b3b003b00003b3b,
  0x9696009600009696, 0x4b4b004b00004b4b, 0xbebe00be0000bebe, 0x2e2e002e00002e2e,
  0x7979007900007979, 0x8c8c008c00008c8c, 0x6e6e006e00006e6e, 0x8e8e008e00008e8e,
  0xf5f500f50000f5f5, 0xb6b600b60000b6b6, 0xfdfd00fd0000fdfd, 0x5959005900005959,
  0x9898009800009898, 0x6a6a006a00006a6a, 0x4646004600004646, 0xbaba00ba0000baba,
  0x2525002500002525, 0x4242004200004242, 0xa2a200a20000a2a2, 0xfafa00fa0000fafa,
  0x0707000700000707, 0x5555005500005555, 0xeeee00ee0000eeee, 0x0a0a000a00000a0a,
  0x4949004900004949, 0x6868006800006868, 0x3838003800003838, 0xa4a400a40000a4a4,
  0x2828002800002828, 0x7b7b007b00007b7b, 0xc9c900c90000c9c9, 0xc1c100c10000c1c1,
  0xe3e300e30000e3e3, 0xf4f400f40000f4f4, 0xc7c700c70000c7c7, 0x9e9e009e00009e9e,
};

static const uint64_t sp64bit5[256] = {
  0x00e0e0e000e0e0e0, 0x0005050500050505, 0x0058585800585858, 0x00d9d9d900d9d9d9,
  0x0067676700676767, 0x004e4e4e004e4e4e, 0x0081818100818181, 0x00cbcbcb00cbcbcb,
  0x00c9c9c900c9c9c9, 0x000b0b0b000b0b0b, 0x00aeaeae00aeaeae, 0x006a6a6a006a6a6a,
  0x00d5d5d500d5d5d5, 0x0018181800181818, 0x005d5d5d005d5d5d, 0x0082828200828282,
  0x0046464600464646, 0x00dfdfdf00dfdfdf, 0x00d6d6d600d6d6d6, 0x0027272700272727,
  0x008a8a8a008a8a8a, 0x0032323200323232, 0x004b4b4b004b4b4b, 0x0042424200424242,
  0x00dbdbdb00dbdbdb, 0x001c1c1c001c1c1c, 0x009e9e9e009e9e9e, 0x009c9c9c009c9c9c,
  0x003a3a3a003a3a3a, 0x00cacaca00cacaca, 0x0025252500252525, 0x007b7b7b007b7b7b,
  0x000d0d0d000d0d0d, 0x0071717100717171, 0x005f5f5f005f5f5f, 0x001f1f1f001f1f1f,
  0x00f8f8f800f8f8f8, 0x00d7d7d700d7d7d7, 0x003e3e3e003e3e3e, 0x009d9d9d009d9d9d,
  0x007c7c7c007c7c7c, 0x0060606000606060, 0x00b9b9b900b9b9b9, 0x00bebebe00bebebe,
  0x00bcbcbc00bcbcbc, 0x008b8b8b008b8b8b, 0x0016161600161616, 0x0034343400343434,
  0x004d4d4d004d4d4d, 0x00c3c3c300c3c3c3, 0x0072727200727272, 0x0095959500959595,
  0x00ababab00ababab, 0x008e8e8e008e8e8e, 0x00bababa00bababa, 0x007a7a7a007a7a7a,
  0x00b3b3b300b3b3b3, 0x0002020200020202, 0x00b4b4b400b4b4b4, 0x00adadad00adadad,
  0x00a2a2a200a2a2a2, 0x00acacac00acacac, 0x00d8d8d800d8d8d8, 0x009a9a9a009a9a9a,
  0x0017171700171717, 0x001a1a1a001a1a1a, 0x0035353500353535, 0x00cccccc00cccccc,
  0x00f7f7f700f7f7f7, 0x0099999900999999, 0x0061616100616161, 0x005a5a5a005a5a5a,
  0x00e8e8e800e8e8e8, 0x0024242400242424, 0x0056565600565656, 0x0040404000404040,
  0x00e1e1e100e1e1e1, 0x0063636300636363, 0x0009090900090909, 0x0033333300333333,
  0x00bfbfbf00bfbfbf, 0x0098989800989898, 0x0097979700979797, 0x0085858500858585,
  0x0068686800686868, 0x00fcfcfc00fcfcfc, 0x00ececec00ececec, 0x000a0a0a000a0a0a,
  0x00dadada00dadada, 0x006f6f6f006f6f6f, 0x0053535300535353, 0x0062626200626262,
  0x00a3a3a300a3a3a3, 0x002e2e2e002e2e2e, 0x0008080800080808, 0x00afafaf00afafaf,
  0x0028282800282828, 0x00b0b0b000b0b0b0, 0x0074747400747474, 0x00c2c2c200c2c2c2,
  0x00bdbdbd00bdbdbd, 0x0036363600363636, 0x0022222200222222, 0x0038383800383838,
  0x0064646400646464, 0x001e1e1e001e1e1e, 0x0039393900393939, 0x002c2c2c002c2c2c,
  0x00a6a6a600a6a6a6, 0x0030303000303030, 0x00e5e5e500e5e5e5, 0x0044444400444444,
  0x00fdfdfd00fdfdfd, 0x0088888800888888, 0x009f9f9f009f9f9f, 0x0065656500656565,
  0x0087878700878787, 0x006b6b6b006b6b6b, 0x00f4f4f400f4f4f4, 0x0023232300232323,
  0x0048484800484848, 0x0010101000101010, 0x00d1d1d100d1d1d1, 0x0051515100515151,
  0x00c0c0c000c0c0c0, 0x00f9f9f900f9f9f9, 0x00d2d2d200d2d2d2, 0x00a0a0a000a0a0a0,
  0x0055555500555555, 0x00a1a1a100a1a1a1, 0x0041414100414141, 0x00fafafa00fafafa,
  0x0043434300434343, 0x0013131300131313, 0x00c4c4c400c4c4c4, 0x002f2f2f002f2f2f,
  0x00a8a8a800a8a8a8, 0x00b6b6b600b6b6b6, 0x003c3c3c003c3c3c, 0x002b2b2b002b2b2b,
  0x00c1c1c100c1c1c1, 0x00ffffff00ffffff, 0x00c8c8c800c8c8c8, 0x00a5a5a500a5a5a5,
  0x0020202000202020, 0x0089898900898989, 0x0000000000000000, 0x0090909000909090,
  0x0047474700474747, 0x00efefef00efefef, 0x00eaeaea00eaeaea, 0x00b7b7b700b7b7b7,
  0x0015151500151515, 0x0006060600060606, 0x00cdcdcd00cdcdcd, 0x00b5b5b500b5b5b5,
  0x0012121200121212, 0x007e7e7e007e7e7e, 0x00bbbbbb00bbbbbb, 0x0029292900292929,
  0x000f0f0f000f0f0f, 0x00b8b8b800b8b8b8, 0x0007070700070707, 0x0004040400040404,
  0x009b9b9b009b9b9b, 0x0094949400949494, 0x0021212100212121, 0x0066666600666666,
  0x00e6e6e600e6e6e6, 0x00cecece00cecece, 0x00ededed00ededed, 0x00e7e7e700e7e7e7,
  0x003b3b3b003b3b3b, 0x00fefefe00fefefe, 0x007f7f7f007f7f7f, 0x00c5c5c500c5c5c5,
  0x00a4a4a400a4a4a4, 0x0037373700373737, 0x00b1b1b100b1b1b1, 0x004c4c4c004c4c4c,
  0x0091919100919191, 0x006e6e6e006e6e6e, 0x008d8d8d008d8d8d, 0x0076767600767676,
  0x0003030300030303, 0x002d2d2d002d2d2d, 0x00dedede00dedede, 0x0096969600969696,
  0x0026262600262626, 0x007d7d7d007d7d7d, 0x00c6c6c600c6c6c6, 0x005c5c5c005c5c5c,
  0x00d3d3d300d3d3d3, 0x00f2f2f200f2f2f2, 0x004f4f4f004f4f4f, 0x0019191900191919,
  0x003f3f3f003f3f3f, 0x00dcdcdc00dcdcdc, 0x0079797900797979, 0x001d1d1d001d1d1d,
  0x0052525200525252, 0x00ebebeb00ebebeb, 0x00f3f3f300f3f3f3, 0x006d6d6d006d6d6d,
  0x005e5e5e005e5e5e, 0x00fbfbfb00fbfbfb, 0x0069696900696969, 0x00b2b2b200b2b2b2,
  0x00f0f0f000f0f0f0, 0x0031313100313131, 0x000c0c0c000c0c0c, 0x00d4d4d400d4d4d4,
  0x00cfcfcf00cfcfcf, 0x008c8c8c008c8c8c, 0x00e2e2e200e2e2e2, 0x0075757500757575,
  0x00a9a9a900a9a9a9, 0x004a4a4a004a4a4a, 0x0057575700575757, 0x0084848400848484,
  0x0011111100111111, 0x0045454500454545, 0x001b1b1b001b1b1b, 0x00f5f5f500f5f5f5,
  0x00e4e4e400e4e4e4, 0x000e0e0e000e0e0e, 0x0073737300737373, 0x00aaaaaa00aaaaaa,
  0x00f1f1f100f1f1f1, 0x00dddddd00dddddd, 0x0059595900595959, 0x0014141400141414,
  0x006c6c6c006c6c6c, 0x0092929200929292, 0x0054545400545454, 0x00d0d0d000d0d0d0,
  0x0078787800787878, 0x0070707000707070, 0x00e3e3e300e3e3e3, 0x0049494900494949,
  0x0080808000808080, 0x0050505000505050, 0x00a7a7a700a7a7a7, 0x00f6f6f600f6f6f6,
  0x0077777700777777, 0x0093939300939393, 0x0086868600868686, 0x0083838300838383,
  0x002a2a2a002a2a2a, 0x00c7c7c700c7c7c7, 0x005b5b5b005b5b5b, 0x00e9e9e900e9e9e9,
  0x00eeeeee00eeeeee, 0x008f8f8f008f8f8f, 0x0001010100010101, 0x003d3d3d003d3d3d,
};

static const uint64_t sp64bit6[256] = {
  0x3800383838003838, 0x4100414141004141, 0x1600161616001616, 0x7600767676007676,
  0xd900d9d9d900d9d9, 0x9300939393009393, 0x6000606060006060, 0xf200f2f2f200f2f2,
  0x7200727272007272, 0xc200c2c2c200c2c2, 0xab00ababab00abab, 0x9a009a9a9a009a9a,
  0x7500757575007575, 0x0600060606000606, 0x5700575757005757, 0xa000a0a0a000a0a0,
  0x9100919191009191, 0xf700f7f7f700f7f7, 0xb500b5b5b500b5b5, 0xc900c9c9c900c9c9,
  0xa200a2a2a200a2a2, 0x8c008c8c8c008c8c, 0xd200d2d2d200d2d2, 0x9000909090009090,
  0xf600f6f6f600f6f6, 0x0700070707000707, 0xa700a7a7a700a7a7, 0x2700272727002727,
  0x8e008e8e8e008e8e, 0xb200b2b2b200b2b2, 0x4900494949004949, 0xde00dedede00dede,
  0x4300434343004343, 0x5c005c5c5c005c5c, 0xd700d7d7d700d7d7, 0xc700c7c7c700c7c7,
  0x3e003e3e3e003e3e, 0xf500f5f5f500f5f5, 0x8f008f8f8f008f8f, 0x6700676767006767,
  0x1f001f1f1f001f1f, 0x1800181818001818, 0x6e006e6e6e006e6e, 0xaf00afafaf00afaf,
  0x2f002f2f2f002f2f, 0xe200e2e2e200e2e2, 0x8500858585008585, 0x0d000d0d0d000d0d,
  0x5300535353005353, 0xf000f0f0f000f0f0, 0x9c009c9c9c009c9c, 0x6500656565006565,
  0xea00eaeaea00eaea, 0xa300a3a3a300a3a3, 0xae00aeaeae00aeae, 0x9e009e9e9e009e9e,
  0xec00ececec00ecec, 0x8000808080008080, 0x2d002d2d2d002d2d, 0x6b006b6b6b006b6b,
  0xa800a8a8a800a8a8, 0x2b002b2b2b002b2b, 0x3600363636003636, 0xa600a6a6a600a6a6,
  0xc500c5c5c500c5c5, 0x8600868686008686, 0x4d004d4d4d004d4d, 0x3300333333003333,
  0xfd00fdfdfd00fdfd, 0x6600666666006666, 0x5800585858005858, 0x9600969696009696,
  0x3a003a3a3a003a3a, 0x0900090909000909, 0x9500959595009595, 0x1000101010001010,
  0x7800787878007878, 0xd800d8d8d800d8d8, 0x4200424242004242, 0xcc00cccccc00cccc,
  0xef00efefef00efef, 0x2600262626002626, 0xe500e5e5e500e5e5, 0x6100616161006161,
  0x1a001a1a1a001a1a, 0x3f003f3f3f003f3f, 0x3b003b3b3b003b3b, 0x8200828282008282,
  0xb600b6b6b600b6b6, 0xdb00dbdbdb00dbdb, 0xd400d4d4d400d4d4, 0x9800989898009898,
  0xe800e8e8e800e8e8, 0x8b008b8b8b008b8b, 0x0200020202000202, 0xeb00ebebeb00ebeb,
  0x0a000a0a0a000a0a, 0x2c002c2c2c002c2c, 0x1d001d1d1d001d1d, 0xb000b0b0b000b0b0,
  0x6f006f6f6f006f6f, 0x8d008d8d8d008d8d, 0x8800888888008888, 0x0e000e0e0e000e0e,
  0x1900191919001919, 0x8700878787008787, 0x4e004e4e4e004e4e, 0x0b000b0b0b000b0b,
  0xa900a9a9a900a9a9, 0x0c000c0c0c000c0c, 0x7900797979007979, 0x1100111111001111,
  0x7f007f7f7f007f7f, 0x2200222222002222, 0xe700e7e7e700e7e7, 0x5900595959005959,
  0xe100e1e1e100e1e1, 0xda00dadada00dada, 0x3d003d3d3d003d3d, 0xc800c8c8c800c8c8,
  0x1200121212001212, 0x0400040404000404, 0x7400747474007474, 0x5400545454005454,
  0x3000303030003030, 0x7e007e7e7e007e7e, 0xb400b4b4b400b4b4, 0x2800282828002828,
  0x5500555555005555, 0x6800686868006868, 0x5000505050005050, 0xbe00bebebe00bebe,
  0xd000d0d0d000d0d0, 0xc400c4c4c400c4c4, 0x3100313131003131, 0xcb00cbcbcb00cbcb,
  0x2a002a2a2a002a2a, 0xad00adadad00adad, 0x0f000f0f0f000f0f, 0xca00cacaca00caca,
  0x7000707070007070, 0xff00ffffff00ffff, 0x3200323232003232, 0x6900696969006969,
  0x0800080808000808, 0x6200626262006262, 0x0000000000000000, 0x2400242424002424,
  0xd100d1d1d100d1d1, 0xfb00fbfbfb00fbfb, 0xba00bababa00baba, 0xed00ededed00eded,
  0x4500454545004545, 0x8100818181008181, 0x7300737373007373, 0x6d006d6d6d006d6d,
  0x8400848484008484, 0x9f009f9f9f009f9f, 0xee00eeeeee00eeee, 0x4a004a4a4a004a4a,
  0xc300c3c3c300c3c3, 0x2e002e2e2e002e2e, 0xc100c1c1c100c1c1, 0x0100010101000101,
  0xe600e6e6e600e6e6, 0x2500252525002525, 0x4800484848004848, 0x9900999999009999,
  0xb900b9b9b900b9b9, 0xb300b3b3b300b3b3, 0x7b007b7b7b007b7b, 0xf900f9f9f900f9f9,
  0xce00cecece00cece, 0xbf00bfbfbf00bfbf, 0xdf00dfdfdf00dfdf, 0x7100717171007171,
  0x2900292929002929, 0xcd00cdcdcd00cdcd, 0x6c006c6c6c006c6c, 0x1300131313001313,
  0x6400646464006464, 0x9b009b9b9b009b9b, 0x6300636363006363, 0x9d009d9d9d009d9d,
  0xc000c0c0c000c0c0, 0x4b004b4b4b004b4b, 0xb700b7b7b700b7b7, 0xa500a5a5a500a5a5,
  0x8900898989008989, 0x5f005f5f5f005f5f, 0xb100b1b1b100b1b1, 0x1700171717001717,
  0xf400f4f4f400f4f4, 0xbc00bcbcbc00bcbc, 0xd300d3d3d300d3d3, 0x4600464646004646,
  0xcf00cfcfcf00cfcf, 0x3700373737003737, 0x5e005e5e5e005e5e, 0x4700474747004747,
  0x9400949494009494, 0xfa00fafafa00fafa, 0xfc00fcfcfc00fcfc, 0x5b005b5b5b005b5b,
  0x9700979797009797, 0xfe00fefefe00fefe, 0x5a005a5a5a005a5a, 0xac00acacac00acac,
  0x3c003c3c3c003c3c, 0x4c004c4c4c004c4c, 0x0300030303000303, 0x3500353535003535,
  0xf300f3f3f300f3f3, 0x2300232323002323, 0xb800b8b8b800b8b8, 0x5d005d5d5d005d5d,
  0x6a006a6a6a006a6a, 0x9200929292009292, 0xd500d5d5d500d5d5, 0x2100212121002121,
  0x4400444444004444, 0x5100515151005151, 0xc600c6c6c600c6c6, 0x7d007d7d7d007d7d,
  0x3900393939003939, 0x8300838383008383, 0xdc00dcdcdc00dcdc, 0xaa00aaaaaa00aaaa,
  0x7c007c7c7c007c7c, 0x7700777777007777, 0x5600565656005656, 0x0500050505000505,
  0x1b001b1b1b001b1b, 0xa400a4a4a400a4a4, 0x1500151515001515, 0x3400343434003434,
  0x1e001e1e1e001e1e, 0x1c001c1c1c001c1c, 0xf800f8f8f800f8f8, 0x5200525252005252,
  0x2000202020002020, 0x1400141414001414, 0xe900e9e9e900e9e9, 0xbd00bdbdbd00bdbd,
  0xdd00dddddd00dddd, 0xe400e4e4e400e4e4, 0xa100a1a1a100a1a1, 0xe000e0e0e000e0e0,
  0x8a008a8a8a008a8a, 0xf100f1f1f100f1f1, 0xd600d6d6d600d6d6, 0x7a007a7a7a007a7a,
  0xbb00bbbbbb00bbbb, 0xe300e3e3e300e3e3, 0x4000404040004040, 0x4f004f4f4f004f4f,
};

static const uint64_t sp64bit7[256] = {
  0x7070007070700070, 0x2c2c002c2c2c002c, 0xb3b300b3b3b300b3, 0xc0c000c0c0c000c0,
  0xe4e400e4e4e400e4, 0x5757005757570057, 0xeaea00eaeaea00ea, 0xaeae00aeaeae00ae,
  0x2323002323230023, 0x6b6b006b6b6b006b, 0x4545004545450045, 0xa5a500a5a5a500a5,
  0xeded00ededed00ed, 0x4f4f004f4f4f004f, 0x1d1d001d1d1d001d, 0x9292009292920092,
  0x8686008686860086, 0xafaf00afafaf00af, 0x7c7c007c7c7c007c, 0x1f1f001f1f1f001f,
  0x3e3e003e3e3e003e, 0xdcdc00dcdcdc00dc, 0x5e5e005e5e5e005e, 0x0b0b000b0b0b000b,
  0xa6a600a6a6a600a6, 0x3939003939390039, 0xd5d500d5d5d500d5, 0x5d5d005d5d5d005d,
  0xd9d900d9d9d900d9, 0x5a5a005a5a5a005a, 0x5151005151510051, 0x6c6c006c6c6c006c,
  0x8b8b008b8b8b008b, 0x9a9a009a9a9a009a, 0xfbfb00fbfbfb00fb, 0xb0b000b0b0b000b0,
  0x7474007474740074, 0x2b2b002b2b2b002b, 0xf0f000f0f0f000f0, 0x8484008484840084,
  0xdfdf00dfdfdf00df, 0xcbcb00cbcbcb00cb, 0x3434003434340034, 0x7676007676760076,
  0x6d6d006d6d6d006d, 0xa9a900a9a9a900a9, 0xd1d100d1d1d100d1, 0x0404000404040004,
  0x1414001414140014, 0x3a3a003a3a3a003a, 0xdede00dedede00de, 0x1111001111110011,
  0x3232003232320032, 0x9c9c009c9c9c009c, 0x5353005353530053, 0xf2f200f2f2f200f2,
  0xfefe00fefefe00fe, 0xcfcf00cfcfcf00cf, 0xc3c300c3c3c300c3, 0x7a7a007a7a7a007a,
  0x2424002424240024, 0xe8e800e8e8e800e8, 0x6060006060600060, 0x6969006969690069,
  0xaaaa00aaaaaa00aa, 0xa0a000a0a0a000a0, 0xa1a100a1a1a100a1, 0x6262006262620062,
  0x5454005454540054, 0x1e1e001e1e1e001e, 0xe0e000e0e0e000e0, 0x6464006464640064,
  0x1010001010100010, 0x0000000000000000, 0xa3a300a3a3a300a3, 0x7575007575750075,
  0x8a8a008a8a8a008a, 0xe6e600e6e6e600e6, 0x0909000909090009, 0xdddd00dddddd00dd,
  0x8787008787870087, 0x8383008383830083, 0xcdcd00cdcdcd00cd, 0x9090009090900090,
  0x7373007373730073, 0xf6f600f6f6f600f6, 0x9d9d009d9d9d009d, 0xbfbf00bfbfbf00bf,
  0x5252005252520052, 0xd8d800d8d8d800d8, 0xc8c800c8c8c800c8, 0xc6c600c6c6c600c6,
  0x8181008181810081, 0x6f6f006f6f6f006f, 0x1313001313130013, 0x6363006363630063,
  0xe9e900e9e9e900e9, 0xa7a700a7a7a700a7, 0x9f9f009f9f9f009f, 0xbcbc00bcbcbc00bc,
  0x2929002929290029, 0xf9f900f9f9f900f9, 0x2f2f002f2f2f002f, 0xb4b400b4b4b400b4,
  0x7878007878780078, 0x0606000606060006, 0xe7e700e7e7e700e7, 0x7171007171710071,
  0xd4d400d4d4d400d4, 0xabab00ababab00ab, 0x8888008888880088, 0x8d8d008d8d8d008d,
  0x7272007272720072, 0xb9b900b9b9b900b9, 0xf8f800f8f8f800f8, 0xacac00acacac00ac,
  0x3636003636360036, 0x2a2a002a2a2a002a, 0x3c3c003c3c3c003c, 0xf1f100f1f1f100f1,
  0x4040004040400040, 0xd3d300d3d3d300d3, 0xbbbb00bbbbbb00bb, 0x4343004343430043,
  0x1515001515150015, 0xadad00adadad00ad, 0x7777007777770077, 0x8080008080800080,
  0x8282008282820082, 0xecec00ececec00ec, 0x2727002727270027, 0xe5e500e5e5e500e5,
  0x8585008585850085, 0x3535003535350035, 0x0c0c000c0c0c000c, 0x4141004141410041,
  0xefef00efefef00ef, 0x9393009393930093, 0x1919001919190019, 0x2121002121210021,
  0x0e0e000e0e0e000e, 0x4e4e004e4e4e004e, 0x6565006565650065, 0xbdbd00bdbdbd00bd,
  0xb8b800b8b8b800b8, 0x8f8f008f8f8f008f, 0xebeb00ebebeb00eb, 0xcece00cecece00ce,
  0x3030003030300030, 0x5f5f005f5f5f005f, 0xc5c500c5c5c500c5, 0x1a1a001a1a1a001a,
  0xe1e100e1e1e100e1, 0xcaca00cacaca00ca, 0x4747004747470047, 0x3d3d003d3d3d003d,
  0x0101000101010001, 0xd6d600d6d6d600d6, 0x5656005656560056, 0x4d4d004d4d4d004d,
  0x0d0d000d0d0d000d, 0x6666006666660066, 0xcccc00cccccc00cc, 0x2d2d002d2d2d002d,
  0x1212001212120012, 0x2020002020200020, 0xb1b100b1b1b100b1, 0x9999009999990099,
  0x4c4c004c4c4c004c, 0xc2c200c2c2c200c2, 0x7e7e007e7e7e007e, 0x0505000505050005,
  0xb7b700b7b7b700b7, 0x3131003131310031, 0x1717001717170017, 0xd7d700d7d7d700d7,
  0x5858005858580058, 0x6161006161610061, 0x1b1b001b1b1b001b, 0x1c1c001c1c1c001c,
  0x0f0f000f0f0f000f, 0x1616001616160016, 0x1818001818180018, 0x2222002222220022,
  0x4444004444440044, 0xb2b200b2b2b200b2, 0xb5b500b5b5b500b5, 0x9191009191910091,
  0x0808000808080008, 0xa8a800a8a8a800a8, 0xfcfc00fcfcfc00fc, 0x5050005050500050,
  0xd0d000d0d0d000d0, 0x7d7d007d7d7d007d, 0x8989008989890089, 0x9797009797970097,
  0x5b5b005b5b5b005b, 0x9595009595950095, 0xffff00ffffff00ff, 0xd2d200d2d2d200d2,
  0xc4c400c4c4c400c4, 0x4848004848480048, 0xf7f700f7f7f700f7, 0xdbdb00dbdbdb00db,
  0x0303000303030003, 0xdada00dadada00da, 0x3f3f003f3f3f003f, 0x9494009494940094,
  0x5c5c005c5c5c005c, 0x0202000202020002, 0x4a4a004a4a4a004a, 0x3333003333330033,
  0x6767006767670067, 0xf3f300f3f3f300f3, 0x7f7f007f7f7f007f, 0xe2e200e2e2e200e2,
  0x9b9b009b9b9b009b, 0x2626002626260026, 0x3737003737370037, 0x3b3b003b3b3b003b,
  0x9696009696960096, 0x4b4b004b4b4b004b, 0xbebe00bebebe00be, 0x2e2e002e2e2e002e,
  0x7979007979790079, 0x8c8c008c8c8c008c, 0x6e6e006e6e6e006e, 0x8e8e008e8e8e008e,
  0xf5f500f5f5f500f5, 0xb6b600b6b6b600b6, 0xfdfd00fdfdfd00fd, 0x5959005959590059,
  0x9898009898980098, 0x6a6a006a6a6a006a, 0x4646004646460046, 0xbaba00bababa00ba,
  0x2525002525250025, 0x4242004242420042, 0xa2a200a2a2a200a2, 0xfafa00fafafa00fa,
  0x0707000707070007, 0x5555005555550055, 0xeeee00eeeeee00ee, 0x0a0a000a0a0a000a,
  0x4949004949490049, 0x6868006868680068, 0x3838003838380038, 0xa4a400a4a4a400a4,
  0x2828002828280028, 0x7b7b007b7b7b007b, 0xc9c900c9c9c900c9, 0xc1c100c1c1c100c1,
  0xe3e300e3e3e300e3, 0xf4f400f4f4f400f4, 0xc7c700c7c7c700c7, 0x9e9e009e9e9e009e,
};

static const uint64_t sp64bit8[256] = {
  0x7070700070707000, 0x8282820082828200, 0x2c2c2c002c2c2c00, 0xececec00ececec00,
  0xb3b3b300b3b3b300, 0x2727270027272700, 0xc0c0c000c0c0c000, 0xe5e5e500e5e5e500,
  0xe4e4e400e4e4e400, 0x8585850085858500, 0x5757570057575700, 0x3535350035353500,
  0xeaeaea00eaeaea00, 0x0c0c0c000c0c0c00, 0xaeaeae00aeaeae00, 0x4141410041414100,
  0x2323230023232300, 0xefefef00efefef00, 0x6b6b6b006b6b6b00, 0x9393930093939300,
  0x4545450045454500, 0x1919190019191900, 0xa5a5a500a5a5a500, 0x2121210021212100,
  0xededed00ededed00, 0x0e0e0e000e0e0e00, 0x4f4f4f004f4f4f00, 0x4e4e4e004e4e4e00,
  0x1d1d1d001d1d1d00, 0x6565650065656500, 0x9292920092929200, 0xbdbdbd00bdbdbd00,
  0x8686860086868600, 0xb8b8b800b8b8b800, 0xafafaf00afafaf00, 0x8f8f8f008f8f8f00,
  0x7c7c7c007c7c7c00, 0xebebeb00ebebeb00, 0x1f1f1f001f1f1f00, 0xcecece00cecece00,
  0x3e3e3e003e3e3e00, 0x3030300030303000, 0xdcdcdc00dcdcdc00, 0x5f5f5f005f5f5f00,
  0x5e5e5e005e5e5e00, 0xc5c5c500c5c5c500, 0x0b0b0b000b0b0b00, 0x1a1a1a001a1a1a00,
  0xa6a6a600a6a6a600, 0xe1e1e100e1e1e100, 0x3939390039393900, 0xcacaca00cacaca00,
  0xd5d5d500d5d5d500, 0x4747470047474700, 0x5d5d5d005d5d5d00, 0x3d3d3d003d3d3d00,
  0xd9d9d900d9d9d900, 0x0101010001010100, 0x5a5a5a005a5a5a00, 0xd6d6d600d6d6d600,
  0x5151510051515100, 0x5656560056565600, 0x6c6c6c006c6c6c00, 0x4d4d4d004d4d4d00,
  0x8b8b8b008b8b8b00, 0x0d0d0d000d0d0d00, 0x9a9a9a009a9a9a00, 0x6666660066666600,
  0xfbfbfb00fbfbfb00, 0xcccccc00cccccc00, 0xb0b0b000b0b0b000, 0x2d2d2d002d2d2d00,
  0x7474740074747400, 0x1212120012121200, 0x2b2b2b002b2b2b00, 0x2020200020202000,
  0xf0f0f000f0f0f000, 0xb1b1b100b1b1b100, 0x8484840084848400, 0x9999990099999900,
  0xdfdfdf00dfdfdf00, 0x4c4c4c004c4c4c00, 0xcbcbcb00cbcbcb00, 0xc2c2c200c2c2c200,
  0x3434340034343400, 0x7e7e7e007e7e7e00, 0x7676760076767600, 0x0505050005050500,
  0x6d6d6d006d6d6d00, 0xb7b7b700b7b7b700, 0xa9a9a900a9a9a900, 0x3131310031313100,
  0xd1d1d100d1d1d100, 0x1717170017171700, 0x0404040004040400, 0xd7d7d700d7d7d700,
  0x1414140014141400, 0x5858580058585800, 0x3a3a3a003a3a3a00, 0x6161610061616100,
  0xdedede00dedede00, 0x1b1b1b001b1b1b00, 0x1111110011111100, 0x1c1c1c001c1c1c00,
  0x3232320032323200, 0x0f0f0f000f0f0f00, 0x9c9c9c009c9c9c00, 0x1616160016161600,
  0x5353530053535300, 0x1818180018181800, 0xf2f2f200f2f2f200, 0x2222220022222200,
  0xfefefe00fefefe00, 0x4444440044444400, 0xcfcfcf00cfcfcf00, 0xb2b2b200b2b2b200,
  0xc3c3c300c3c3c300, 0xb5b5b500b5b5b500, 0x7a7a7a007a7a7a00, 0x9191910091919100,
  0x2424240024242400, 0x0808080008080800, 0xe8e8e800e8e8e800, 0xa8a8a800a8a8a800,
  0x6060600060606000, 0xfcfcfc00fcfcfc00, 0x6969690069696900, 0x5050500050505000,
  0xaaaaaa00aaaaaa00, 0xd0d0d000d0d0d000, 0xa0a0a000a0a0a000, 0x7d7d7d007d7d7d00,
  0xa1a1a100a1a1a100, 0x8989890089898900, 0x6262620062626200, 0x9797970097979700,
  0x5454540054545400, 0x5b5b5b005b5b5b00, 0x1e1e1e001e1e1e00, 0x9595950095959500,
  0xe0e0e000e0e0e000, 0xffffff00ffffff00, 0x6464640064646400, 0xd2d2d200d2d2d200,
  0x1010100010101000, 0xc4c4c400c4c4c400, 0x0000000000000000, 0x4848480048484800,
  0xa3a3a300a3a3a300, 0xf7f7f700f7f7f700, 0x7575750075757500, 0xdbdbdb00dbdbdb00,
  0x8a8a8a008a8a8a00, 0x0303030003030300, 0xe6e6e600e6e6e600, 0xdadada00dadada00,
  0x0909090009090900, 0x3f3f3f003f3f3f00, 0xdddddd00dddddd00, 0x9494940094949400,
  0x8787870087878700, 0x5c5c5c005c5c5c00, 0x8383830083838300, 0x0202020002020200,
  0xcdcdcd00cdcdcd00, 0x4a4a4a004a4a4a00, 0x9090900090909000, 0x3333330033333300,
  0x7373730073737300, 0x6767670067676700, 0xf6f6f600f6f6f600, 0xf3f3f300f3f3f300,
  0x9d9d9d009d9d9d00, 0x7f7f7f007f7f7f00, 0xbfbfbf00bfbfbf00, 0xe2e2e200e2e2e200,
  0x5252520052525200, 0x9b9b9b009b9b9b00, 0xd8d8d800d8d8d800, 0x2626260026262600,
  0xc8c8c800c8c8c800, 0x3737370037373700, 0xc6c6c600c6c6c600, 0x3b3b3b003b3b3b00,
  0x8181810081818100, 0x9696960096969600, 0x6f6f6f006f6f6f00, 0x4b4b4b004b4b4b00,
  0x1313130013131300, 0xbebebe00bebebe00, 0x6363630063636300, 0x2e2e2e002e2e2e00,
  0xe9e9e900e9e9e900, 0x7979790079797900, 0xa7a7a700a7a7a700, 0x8c8c8c008c8c8c00,
  0x9f9f9f009f9f9f00, 0x6e6e6e006e6e6e00, 0xbcbcbc00bcbcbc00, 0x8e8e8e008e8e8e00,
  0x2929290029292900, 0xf5f5f500f5f5f500, 0xf9f9f900f9f9f900, 0xb6b6b600b6b6b600,
  0x2f2f2f002f2f2f00, 0xfdfdfd00fdfdfd00, 0xb4b4b400b4b4b400, 0x5959590059595900,
  0x7878780078787800, 0x9898980098989800, 0x0606060006060600, 0x6a6a6a006a6a6a00,
  0xe7e7e700e7e7e700, 0x4646460046464600, 0x7171710071717100, 0xbababa00bababa00,
  0xd4d4d400d4d4d400, 0x2525250025252500, 0xababab00ababab00, 0x4242420042424200,
  0x8888880088888800, 0xa2a2a200a2a2a200, 0x8d8d8d008d8d8d00, 0xfafafa00fafafa00,
  0x7272720072727200, 0x0707070007070700, 0xb9b9b900b9b9b900, 0x5555550055555500,
  0xf8f8f800f8f8f800, 0xeeeeee00eeeeee00, 0xacacac00acacac00, 0x0a0a0a000a0a0a00,
  0x3636360036363600, 0x4949490049494900, 0x2a2a2a002a2a2a00, 0x6868680068686800,
  0x3c3c3c003c3c3c00, 0x3838380038383800, 0xf1f1f100f1f1f100, 0xa4a4a400a4a4a400,
  0x4040400040404000, 0x2828280028282800, 0xd3d3d300d3d3d300, 0x7b7b7b007b7b7b00,
  0xbbbbbb00bbbbbb00, 0xc9c9c900c9c9c900, 0x4343430043434300, 0xc1c1c100c1c1c100,
  0x1515150015151500, 0xe3e3e300e3e3e300, 0xadadad00adadad00, 0xf4f4f400f4f4f400,
  0x7777770077777700, 0xc7c7c700c7c7c700, 0x8080800080808000, 0x9e9e9e009e9e9e00,
};
#else
static const uint8_t sbox1[256] = {
  0x70, 0x82, 0x2C, 0xEC, 0xB3, 0x27, 0xC0, 0xE5, 0xE4, 0x85, 0x57, 0x35, 0xEA, 0x0C, 0xAE, 0x41,
  0x23, 0xEF, 0x6B, 0x93, 0x45, 0x19, 0xA5, 0x21, 0xED, 0x0E, 0x4F, 0x4E, 0x1D, 0x65, 0x92, 0xBD,
  0x86, 0xB8, 0xAF, 0x8F, 0x7C, 0xEB, 0x1F, 0xCE, 0x3E, 0x30, 0xDC, 0x5F, 0x5E, 0xC5, 0x0B, 0x1A,
  0xA6, 0xE1, 0x39, 0xCA, 0xD5, 0x47, 0x5D, 0x3D, 0xD9, 0x01, 0x5A, 0xD6, 0x51, 0x56, 0x6C, 0x4D,
  0x8B, 0x0D, 0x9A, 0x66, 0xFB, 0xCC, 0xB0, 0x2D, 0x74, 0x12, 0x2B, 0x20, 0xF0, 0xB1, 0x84, 0x99,
  0xDF, 0x4C, 0xCB, 0xC2, 0x34, 0x7E, 0x76, 0x05, 0x6D, 0xB7, 0xA9, 0x31, 0xD1, 0x17, 0x04, 0xD7,
  0x14, 0x58, 0x3A, 0x61, 0xDE, 0x1B, 0x11, 0x1C, 0x32, 0x0F, 0x9C, 0x16, 0x53, 0x18, 0xF2, 0x22,
  0xFE, 0x44, 0xCF, 0xB2, 0xC3, 0xB5, 0x7A, 0x91, 0x24, 0x08, 0xE8, 0xA8, 0x60, 0xFC, 0x69, 0x50,
  0xAA, 0xD0, 0xA0, 0x7D, 0xA1, 0x89, 0x62, 0x97, 0x54, 0x5B, 0x1E, 0x95, 0xE0, 0xFF, 0x64, 0xD2,
  0x10, 0xC4, 0x00, 0x48, 0xA3, 0xF7, 0x75, 0xDB, 0x8A, 0x03, 0xE6, 0xDA, 0x09, 0x3F, 0xDD, 0x94,
  0x87, 0x5C, 0x83, 0x02, 0xCD, 0x4A, 0x90, 0x33, 0x73, 0x67, 0xF6, 0xF3, 0x9D, 0x7F, 0xBF, 0xE2,
  0x52, 0x9B, 0xD8, 0x26, 0xC8, 0x37, 0xC6, 0x3B, 0x81, 0x96, 0x6F, 0x4B, 0x13, 0xBE, 0x63, 0x2E,
  0xE9, 0x79, 0xA7, 0x8C, 0x9F, 0x6E, 0xBC, 0x8E, 0x29, 0xF5, 0xF9, 0xB6, 0x2F, 0xFD, 0xB4, 0x59,
  0x78, 0x98, 0x06, 0x6A, 0xE7, 0x46, 0x71, 0xBA, 0xD4, 0x25, 0xAB, 0x42, 0x88, 0xA2, 0x8D, 0xFA,
  0x72, 0x07, 0xB9, 0x55, 0xF8, 0xEE, 0xAC, 0x0A, 0x36, 0x49, 0x2A, 0x68, 0x3C, 0x38, 0xF1, 0xA4,
  0x40, 0x28, 0xD3, 0x7B, 0xBB, 0xC9, 0x43, 0xC1, 0x15, 0xE3, 0xAD, 0xF4, 0x77, 0xC7, 0x80, 0x9E,
};

static const uint8_t sbox2[256] = {
  0xE0, 0x05, 0x58, 0xD9, 0x67, 0x4E, 0x81, 0xCB, 0xC9, 0x0B, 0xAE, 0x6A, 0xD5, 0x18, 0x5D, 0x82,
  0x46, 0xDF, 0xD6, 0x27, 0x8A, 0x32, 0x4B, 0x42, 0xDB, 0x1C, 0x9E, 0x9C, 0x3A, 0xCA, 0x25, 0x7B,
  0x0D, 0x71, 0x5F, 0x1F, 0xF8, 0xD7, 0x3E, 0x9D, 0x7C, 0x60, 0xB9, 0xBE, 0xBC, 0x8B, 0x16, 0x34,
  0x4D, 0xC3, 0x72, 0x95, 0xAB, 0x8E, 0xBA, 0x7A, 0xB3, 0x02, 0xB4, 0xAD, 0xA2, 0xAC, 0xD8, 0x9A,
  0x17, 0x1A, 0x35, 0xCC, 0xF7, 0x99, 0x61, 0x5A, 0xE8, 0x24, 0x56, 0x40, 0xE1, 0x63, 0x09, 0x33,
  0xBF, 0x98, 0x97, 0x85, 0x68, 0xFC, 0xEC, 0x0A, 0xDA, 0x6F, 0x53, 0x62, 0xA3, 0x2E, 0x08, 0xAF,
  0x28, 0xB0, 0x74, 0xC2, 0xBD, 0x36, 0x22, 0x38, 0x64, 0x1E, 0x39, 0x2C, 0xA6, 0x30, 0xE5, 0x44,
  0xFD, 0x88, 0x9F, 0x65, 0x87, 0x6B, 0xF4, 0x23, 0x48, 0x10, 0xD1, 0x51, 0xC0, 0xF9, 0xD2, 0xA0,
  0x55, 0xA1, 0x41, 0xFA, 0x43, 0x13, 0xC4, 0x2F, 0xA8, 0xB6, 0x3C, 0x2B, 0xC1, 0xFF, 0xC8, 0xA5,
  0x20, 0x89, 0x00, 0x90, 0x47, 0xEF, 0xEA, 0xB7, 0x15, 0x06, 0xCD, 0xB5, 0x12, 0x7E, 0xBB, 0x29,
  0x0F, 0xB8, 0x07, 0x04, 0x9B, 0x94, 0x21, 0x66, 0xE6, 0xCE, 0xED, 0xE7, 0x3B, 0xFE, 0x7F, 0xC5,
  0xA4, 0x37, 0xB1, 0x4C, 0x91, 0x6E, 0x8D, 0x76, 0x03, 0x2D, 0xDE, 0x96, 0x26, 0x7D, 0xC6, 0x5C,
  0xD3, 0xF2, 0x4F, 0x19, 0x3F, 0xDC, 0x79, 0x1D, 0x52, 0xEB, 0xF3, 0x6D, 0x5E, 0xFB, 0x69, 0xB2,
  0xF0, 0x31, 0x0C, 0xD4, 0xCF, 0x8C, 0xE2, 0x75, 0xA9, 0x4A, 0x57, 0x84, 0x11, 0x45, 0x1B, 0xF5,
  0xE4, 0x0E, 0x73, 0xAA, 0xF1, 0xDD, 0x59, 0x14, 0x6C, 0x92, 0x54, 0xD0, 0x78, 0x70, 0xE3, 0x49,
  0x80, 0x50, 0xA7, 0xF6, 0x77, 0x93, 0x86, 0x83, 0x2A, 0xC7, 0x5B, 0xE9, 0xEE, 0x8F, 0x01, 0x3D,
};

static const uint8_t sbox3[256] = {
  0x38, 0x41, 0x16, 0x76, 0xD9, 0x93, 0x60, 0xF2, 0x72, 0xC2, 0xAB, 0x9A, 0x75, 0x06, 0x57, 0xA0,
  0x91, 0xF7, 0xB5, 0xC9, 0xA2, 0x8C, 0xD2, 0x90, 0xF6, 0x07, 0xA7, 0x27, 0x8E, 0xB2, 0x49, 0xDE,
  0x43, 0x5C, 0xD7, 0xC7, 0x3E, 0xF5, 0x8F, 0x67, 0x1F, 0x18, 0x6E, 0xAF, 0x2F, 0xE2, 0x85, 0x0D,
  0x53, 0xF0, 0x9C, 0x65, 0xEA, 0xA3, 0xAE, 0x9E, 0xEC, 0x80, 0x2D, 0x6B, 0xA8, 0x2B, 0x36, 0xA6,
  0xC5, 0x86, 0x4D, 0x33, 0xFD, 0x66, 0x58, 0x96, 0x3A, 0x09, 0x95, 0x10, 0x78, 0xD8, 0x42, 0xCC,
  0xEF, 0x26, 0xE5, 0x61, 0x1A, 0x3F, 0x3B, 0x82, 0xB6, 0xDB, 0xD4, 0x98, 0xE8, 0x8B, 0x02, 0xEB,
  0x0A, 0x2C, 0x1D, 0xB0, 0x6F, 0x8D, 0x88, 0x0E, 0x19, 0x87, 0x4E, 0x0B, 0xA9, 0x0C, 0x79, 0x11,
  0x7F, 0x22, 0xE7, 0x59, 0xE1, 0xDA, 0x3D, 0xC8, 0x12, 0x04, 0x74, 0x54, 0x30, 0x7E, 0xB4, 0x28,
  0x55, 0x68, 0x50, 0xBE, 0xD0, 0xC4, 0x31, 0xCB, 0x2A, 0xAD, 0x0F, 0xCA, 0x70, 0xFF, 0x32, 0x69,
  0x08, 0x62, 0x00, 0x24, 0xD1, 0xFB, 0xBA, 0xED, 0x45, 0x81, 0x73, 0x6D, 0x84, 0x9F, 0xEE, 0x4A,
  0xC3, 0x2E, 0xC1, 0x01, 0xE6, 0x25, 0x48, 0x99, 0xB9, 0xB3, 0x7B, 0xF9, 0xCE, 0xBF, 0xDF, 0x71,
  0x29, 0xCD, 0x6C, 0x13, 0x64, 0x9B, 0x63, 0x9D, 0xC0, 0x4B, 0xB7, 0xA5, 0x89, 0x5F, 0xB1, 0x17,
  0xF4, 0xBC, 0xD3, 0x46, 0xCF, 0x37, 0x5E, 0x47, 0x94, 0xFA, 0xFC, 0x5B, 0x97, 0xFE, 0x5A, 0xAC,
  0x3C, 0x4C, 0x03, 0x35, 0xF3, 0x23, 0xB8, 0x5D, 0x6A, 0x92, 0xD5, 0x21, 0x44, 0x51, 0xC6, 0x7D,
  0x39, 0x83, 0xDC, 0xAA, 0x7C, 0x77, 0x56, 0x05, 0x1B, 0xA4, 0x15, 0x34, 0x1E, 0x1C, 0xF8, 0x52,
  0x20, 0x14, 0xE9, 0xBD, 0xDD, 0xE4, 0xA1, 0xE0, 0x8A, 0xF1, 0xD6, 0x7A, 0xBB, 0xE3, 0x40, 0x4F,
};

static const uint8_t sbox4[256] = {
  0x70, 0x2C, 0xB3, 0xC0, 0xE4, 0x57, 0xEA, 0xAE, 0x23, 0x6B, 0x45, 0xA5, 0xED, 0x4F, 0x1D, 0x92,
  0x86, 0xAF, 0x7C, 0x1F, 0x3E, 0xDC, 0x5E, 0x0B, 0xA6, 0x39, 0xD5, 0x5D, 0xD9, 0x5A, 0x51, 0x6C,
  0x8B, 0x9A, 0xFB, 0xB0, 0x74, 0x2B, 0xF0, 0x84, 0xDF, 0xCB, 0x34, 0x76, 0x6D, 0xA9, 0xD1, 0x04,
  0x14, 0x3A, 0xDE, 0x11, 0x32, 0x9C, 0x53, 0xF2, 0xFE, 0xCF, 0xC3, 0x7A, 0x24, 0xE8, 0x60, 0x69,
  0xAA, 0xA0, 0xA1, 0x62, 0x54, 0x1E, 0xE0, 0x64, 0x10, 0x00, 0xA3, 0x75, 0x8A, 0xE6, 0x09, 0xDD,
  0x87, 0x83, 0xCD, 0x90, 0x73, 0xF6, 0x9D, 0xBF, 0x52, 0xD8, 0xC8, 0xC6, 0x81, 0x6F, 0x13, 0x63,
  0xE9, 0xA7, 0x9F, 0xBC, 0x29, 0xF9, 0x2F, 0xB4, 0x78, 0x06, 0xE7, 0x71, 0xD4, 0xAB, 0x88, 0x8D,
  0x72, 0xB9, 0xF8, 0xAC, 0x36, 0x2A, 0x3C, 0xF1, 0x40, 0xD3, 0xBB, 0x43, 0x15, 0xAD, 0x77, 0x80,
  0x82, 0xEC, 0x27, 0xE5, 0x85, 0x35, 0x0C, 0x41, 0xEF, 0x93, 0x19, 0x21, 0x0E, 0x4E, 0x65, 0xBD,
  0xB8, 0x8F, 0xEB, 0xCE, 0x30, 0x5F, 0xC5, 0x1A, 0xE1, 0xCA, 0x47, 0x3D, 0x01, 0xD6, 0x56, 0x4D,
  0x0D, 0x66, 0xCC, 0x2D, 0x12, 0x20, 0xB1, 0x99, 0x4C, 0xC2, 0x7E, 0x05, 0xB7, 0x31, 0x17, 0xD7,
  0x58, 0x61, 0x1B, 0x1C, 0x0F, 0x16, 0x18, 0x22, 0x44, 0xB2, 0xB5, 0x91, 0x08, 0xA8, 0xFC, 0x50,
  0xD0, 0x7D, 0x89, 0x97, 0x5B, 0x95, 0xFF, 0xD2, 0xC4, 0x48, 0xF7, 0xDB, 0x03, 0xDA, 0x3F, 0x94,
  0x5C, 0x02, 0x4A, 0x33, 0x67, 0xF3, 0x7F, 0xE2, 0x9B, 0x26, 0x37, 0x3B, 0x96, 0x4B, 0xBE, 0x2E,
  0x79, 0x8C, 0x6E, 0x8E, 0xF5, 0xB6, 0xFD, 0x59, 0x98, 0x6A, 0x46, 0xBA, 0x25, 0x42, 0xA2, 0xFA,
  0x07, 0x55, 0xEE, 0x0A, 0x49, 0x68, 0x38, 0xA4, 0x28, 0x7B, 0xC9, 0xC1, 0xE3, 0xF4, 0xC7, 0x9E,
};

static const uint64_t sp32bit1110[256] = {
  0x70707000, 0x82828200, 0x2c2c2c00, 0xececec00,
  0xb3b3b300, 0x27272700, 0xc0c0c000, 0xe5e5e500,
  0xe4e4e400, 0x85858500, 0x57575700, 0x35353500,
  0xeaeaea00, 0x0c0c0c00, 0xaeaeae00, 0x41414100,
  0x23232300, 0xefefef00, 0x6b6b6b00, 0x93939300,
  0x45454500, 0x19191900, 0xa5a5a500, 0x21212100,
  0xededed00, 0x0e0e0e00, 0x4f4f4f00, 0x4e4e4e00,
  0x1d1d1d00, 0x65656500, 0x92929200, 0xbdbdbd00,
  0x86868600, 0xb8b8b800, 0xafafaf00, 0x8f8f8f00,
  0x7c7c7c00, 0xebebeb00, 0x1f1f1f00, 0xcecece00,
  0x3e3e3e00, 0x30303000, 0xdcdcdc00, 0x5f5f5f00,
  0x5e5e5e00, 0xc5c5c500, 0x0b0b0b00, 0x1a1a1a00,
  0xa6a6a600, 0xe1e1e100, 0x39393900, 0xcacaca00,
  0xd5d5d500, 0x47474700, 0x5d5d5d00, 0x3d3d3d00,
  0xd9d9d900, 0x01010100, 0x5a5a5a00, 0xd6d6d600,
  0x51515100, 0x56565600, 0x6c6c6c00, 0x4d4d4d00,
  0x8b8b8b00, 0x0d0d0d00, 0x9a9a9a00, 0x66666600,
  0xfbfbfb00, 0xcccccc00, 0xb0b0b000, 0x2d2d2d00,
  0x74747400, 0x12121200, 0x2b2b2b00, 0x20202000,
  0xf0f0f000, 0xb1b1b100, 0x84848400, 0x99999900,
  0xdfdfdf00, 0x4c4c4c00, 0xcbcbcb00, 0xc2c2c200,
  0x34343400, 0x7e7e7e00, 0x76767600, 0x05050500,
  0x6d6d6d00, 0xb7b7b700, 0xa9a9a900, 0x31313100,
  0xd1d1d100, 0x17171700, 0x04040400, 0xd7d7d700,
  0x14141400, 0x58585800, 0x3a3a3a00, 0x61616100,
  0xdedede00, 0x1b1b1b00, 0x11111100, 0x1c1c1c00,
  0x32323200, 0x0f0f0f00, 0x9c9c9c00, 0x16161600,
  0x53535300, 0x18181800, 0xf2f2f200, 0x22222200,
  0xfefefe00, 0x44444400, 0xcfcfcf00, 0xb2b2b200,
  0xc3c3c300, 0xb5b5b500, 0x7a7a7a00, 0x91919100,
  0x24242400, 0x08080800, 0xe8e8e800, 0xa8a8a800,
  0x60606000, 0xfcfcfc00, 0x69696900, 0x50505000,
  0xaaaaaa00, 0xd0d0d000, 0xa0a0a000, 0x7d7d7d00,
  0xa1a1a100, 0x89898900, 0x62626200, 0x97979700,
  0x54545400, 0x5b5b5b00, 0x1e1e1e00, 0x95959500,
  0xe0e0e000, 0xffffff00, 0x64646400, 0xd2d2d200,
  0x10101000, 0xc4c4c400, 0x00000000, 0x48484800,
  0xa3a3a300, 0xf7f7f700, 0x75757500, 0xdbdbdb00,
  0x8a8a8a00, 0x03030300, 0xe6e6e600, 0xdadada00,
  0x09090900, 0x3f3f3f00, 0xdddddd00, 0x94949400,
  0x87878700, 0x5c5c5c00, 0x83838300, 0x02020200,
  0xcdcdcd00, 0x4a4a4a00, 0x90909000, 0x33333300,
  0x73737300, 0x67676700, 0xf6f6f600, 0xf3f3f300,
  0x9d9d9d00, 0x7f7f7f00, 0xbfbfbf00, 0xe2e2e200,
  0x52525200, 0x9b9b9b00, 0xd8d8d800, 0x26262600,
  0xc8c8c800, 0x37373700, 0xc6c6c600, 0x3b3b3b00,
  0x81818100, 0x96969600, 0x6f6f6f00, 0x4b4b4b00,
  0x13131300, 0xbebebe00, 0x63636300, 0x2e2e2e00,
  0xe9e9e900, 0x79797900, 0xa7a7a700, 0x8c8c8c00,
  0x9f9f9f00, 0x6e6e6e00, 0xbcbcbc00, 0x8e8e8e00,
  0x29292900, 0xf5f5f500, 0xf9f9f900, 0xb6b6b600,
  0x2f2f2f00, 0xfdfdfd00, 0xb4b4b400, 0x59595900,
  0x78787800, 0x98989800, 0x06060600, 0x6a6a6a00,
  0xe7e7e700, 0x46464600, 0x71717100, 0xbababa00,
  0xd4d4d400, 0x25252500, 0xababab00, 0x42424200,
  0x88888800, 0xa2a2a200, 0x8d8d8d00, 0xfafafa00,
  0x72727200, 0x07070700, 0xb9b9b900, 0x55555500,
  0xf8f8f800, 0xeeeeee00, 0xacacac00, 0x0a0a0a00,
  0x36363600, 0x49494900, 0x2a2a2a00, 0x68686800,
  0x3c3c3c00, 0x38383800, 0xf1f1f100, 0xa4a4a400,
  0x40404000, 0x28282800, 0xd3d3d300, 0x7b7b7b00,
  0xbbbbbb00, 0xc9c9c900, 0x43434300, 0xc1c1c100,
  0x15151500, 0xe3e3e300, 0xadadad00, 0xf4f4f400,
  0x77777700, 0xc7c7c700, 0x80808000, 0x9e9e9e00,
};

static const uint64_t sp32bit0222[256] = {
  0x00e0e0e0, 0x00050505, 0x00585858, 0x00d9d9d9,
  0x00676767, 0x004e4e4e, 0x00818181, 0x00cbcbcb,
  0x00c9c9c9, 0x000b0b0b, 0x00aeaeae, 0x006a6a6a,
  0x00d5d5d5, 0x00181818, 0x005d5d5d, 0x00828282,
  0x00464646, 0x00dfdfdf, 0x00d6d6d6, 0x00272727,
  0x008a8a8a, 0x00323232, 0x004b4b4b, 0x00424242,
  0x00dbdbdb, 0x001c1c1c, 0x009e9e9e, 0x009c9c9c,
  0x003a3a3a, 0x00cacaca, 0x00252525, 0x007b7b7b,
  0x000d0d0d, 0x00717171, 0x005f5f5f, 0x001f1f1f,
  0x00f8f8f8, 0x00d7d7d7, 0x003e3e3e, 0x009d9d9d,
  0x007c7c7c, 0x00606060, 0x00b9b9b9, 0x00bebebe,
  0x00bcbcbc, 0x008b8b8b, 0x00161616, 0x00343434,
  0x004d4d4d, 0x00c3c3c3, 0x00727272, 0x00959595,
  0x00ababab, 0x008e8e8e, 0x00bababa, 0x007a7a7a,
  0x00b3b3b3, 0x00020202, 0x00b4b4b4, 0x00adadad,
  0x00a2a2a2, 0x00acacac, 0x00d8d8d8, 0x009a9a9a,
  0x00171717, 0x001a1a1a, 0x00353535, 0x00cccccc,
  0x00f7f7f7, 0x00999999, 0x00616161, 0x005a5a5a,
  0x00e8e8e8, 0x00242424, 0x00565656, 0x00404040,
  0x00e1e1e1, 0x00636363, 0x00090909, 0x00333333,
  0x00bfbfbf, 0x00989898, 0x00979797, 0x00858585,
  0x00686868, 0x00fcfcfc, 0x00ececec, 0x000a0a0a,
  0x00dadada, 0x006f6f6f, 0x00535353, 0x00626262,
  0x00a3a3a3, 0x002e2e2e, 0x00080808, 0x00afafaf,
  0x00282828, 0x00b0b0b0, 0x00747474, 0x00c2c2c2,
  0x00bdbdbd, 0x00363636, 0x00222222, 0x00383838,
  0x00646464, 0x001e1e1e, 0x00393939, 0x002c2c2c,
  0x00a6a6a6, 0x00303030, 0x00e5e5e5, 0x00444444,
  0x00fdfdfd, 0x00888888, 0x009f9f9f, 0x00656565,
  0x00878787, 0x006b6b6b, 0x00f4f4f4, 0x00232323,
  0x00484848, 0x00101010, 0x00d1d1d1, 0x00515151,
  0x00c0c0c0, 0x00f9f9f9, 0x00d2d2d2, 0x00a0a0a0,
  0x00555555, 0x00a1a1a1, 0x00414141, 0x00fafafa,
  0x00434343, 0x00131313, 0x00c4c4c4, 0x002f2f2f,
  0x00a8a8a8, 0x00b6b6b6, 0x003c3c3c, 0x002b2b2b,
  0x00c1c1c1, 0x00ffffff, 0x00c8c8c8, 0x00a5a5a5,
  0x00202020, 0x00898989, 0x00000000, 0x00909090,
  0x00474747, 0x00efefef, 0x00eaeaea, 0x00b7b7b7,
  0x00151515, 0x00060606, 0x00cdcdcd, 0x00b5b5b5,
  0x00121212, 0x007e7e7e, 0x00bbbbbb, 0x00292929,
  0x000f0f0f, 0x00b8b8b8, 0x00070707, 0x00040404,
  0x009b9b9b, 0x00949494, 0x00212121, 0x00666666,
  0x00e6e6e6, 0x00cecece, 0x00ededed, 0x00e7e7e7,
  0x003b3b3b, 0x00fefefe, 0x007f7f7f, 0x00c5c5c5,
  0x00a4a4a4, 0x00373737, 0x00b1b1b1, 0x004c4c4c,
  0x00919191, 0x006e6e6e, 0x008d8d8d, 0x00767676,
  0x00030303, 0x002d2d2d, 0x00dedede, 0x00969696,
  0x00262626, 0x007d7d7d, 0x00c6c6c6, 0x005c5c5c,
  0x00d3d3d3, 0x00f2f2f2, 0x004f4f4f, 0x00191919,
  0x003f3f3f, 0x00dcdcdc, 0x00797979, 0x001d1d1d,
  0x00525252, 0x00ebebeb, 0x00f3f3f3, 0x006d6d6d,
  0x005e5e5e, 0x00fbfbfb, 0x00696969, 0x00b2b2b2,
  0x00f0f0f0, 0x00313131, 0x000c0c0c, 0x00d4d4d4,
  0x00cfcfcf, 0x008c8c8c, 0x00e2e2e2, 0x00757575,
  0x00a9a9a9, 0x004a4a4a, 0x00575757, 0x00848484,
  0x00111111, 0x00454545, 0x001b1b1b, 0x00f5f5f5,
  0x00e4e4e4, 0x000e0e0e, 0x00737373, 0x00aaaaaa,
  0x00f1f1f1, 0x00dddddd, 0x00595959, 0x00141414,
  0x006c6c6c, 0x00929292, 0x00545454, 0x00d0d0d0,
  0x00787878, 0x00707070, 0x00e3e3e3, 0x00494949,
  0x00808080, 0x00505050, 0x00a7a7a7, 0x00f6f6f6,
  0x00777777, 0x00939393, 0x00868686, 0x00838383,
  0x002a2a2a, 0x00c7c7c7, 0x005b5b5b, 0x00e9e9e9,
  0x00eeeeee, 0x008f8f8f, 0x00010101, 0x003d3d3d,
};

static const uint64_t sp32bit3033[256] = {
  0x38003838, 0x41004141, 0x16001616, 0x76007676,
  0xd900d9d9, 0x93009393, 0x60006060, 0xf200f2f2,
  0x72007272, 0xc200c2c2, 0xab00abab, 0x9a009a9a,
  0x75007575, 0x06000606, 0x57005757, 0xa000a0a0,
  0x91009191, 0xf700f7f7, 0xb500b5b5, 0xc900c9c9,
  0xa200a2a2, 0x8c008c8c, 0xd200d2d2, 0x90009090,
  0xf600f6f6, 0x07000707, 0xa700a7a7, 0x27002727,
  0x8e008e8e, 0xb200b2b2, 0x49004949, 0xde00dede,
  0x43004343, 0x5c005c5c, 0xd700d7d7, 0xc700c7c7,
  0x3e003e3e, 0xf500f5f5, 0x8f008f8f, 0x67006767,
  0x1f001f1f, 0x18001818, 0x6e006e6e, 0xaf00afaf,
  0x2f002f2f, 0xe200e2e2, 0x85008585, 0x0d000d0d,
  0x53005353, 0xf000f0f0, 0x9c009c9c, 0x65006565,
  0xea00eaea, 0xa300a3a3, 0xae00aeae, 0x9e009e9e,
  0xec00ecec, 0x80008080, 0x2d002d2d, 0x6b006b6b,
  0xa800a8a8, 0x2b002b2b, 0x36003636, 0xa600a6a6,
  0xc500c5c5, 0x86008686, 0x4d004d4d, 0x33003333,
  0xfd00fdfd, 0x66006666, 0x58005858, 0x96009696,
  0x3a003a3a, 0x09000909, 0x95009595, 0x10001010,
  0x78007878, 0xd800d8d8, 0x42004242, 0xcc00cccc,
  0xef00efef, 0x26002626, 0xe500e5e5, 0x61006161,
  0x1a001a1a, 0x3f003f3f, 0x3b003b3b, 0x82008282,
  0xb600b6b6, 0xdb00dbdb, 0xd400d4d4, 0x98009898,
  0xe800e8e8, 0x8b008b8b, 0x02000202, 0xeb00ebeb,
  0x0a000a0a, 0x2c002c2c, 0x1d001d1d, 0xb000b0b0,
  0x6f006f6f, 0x8d008d8d, 0x88008888, 0x0e000e0e,
  0x19001919, 0x87008787, 0x4e004e4e, 0x0b000b0b,
  0xa900a9a9, 0x0c000c0c, 0x79007979, 0x11001111,
  0x7f007f7f, 0x22002222, 0xe700e7e7, 0x59005959,
  0xe100e1e1, 0xda00dada, 0x3d003d3d, 0xc800c8c8,
  0x12001212, 0x04000404, 0x74007474, 0x54005454,
  0x30003030, 0x7e007e7e, 0xb400b4b4, 0x28002828,
  0x55005555, 0x68006868, 0x50005050, 0xbe00bebe,
  0xd000d0d0, 0xc400c4c4, 0x31003131, 0xcb00cbcb,
  0x2a002a2a, 0xad00adad, 0x0f000f0f, 0xca00caca,
  0x70007070, 0xff00ffff, 0x32003232, 0x69006969,
  0x08000808, 0x62006262, 0x00000000, 0x24002424,
  0xd100d1d1, 0xfb00fbfb, 0xba00baba, 0xed00eded,
  0x45004545, 0x81008181, 0x73007373, 0x6d006d6d,
  0x84008484, 0x9f009f9f, 0xee00eeee, 0x4a004a4a,
  0xc300c3c3, 0x2e002e2e, 0xc100c1c1, 0x01000101,
  0xe600e6e6, 0x25002525, 0x48004848, 0x99009999,
  0xb900b9b9, 0xb300b3b3, 0x7b007b7b, 0xf900f9f9,
  0xce00cece, 0xbf00bfbf, 0xdf00dfdf, 0x71007171,
  0x29002929, 0xcd00cdcd, 0x6c006c6c, 0x13001313,
  0x64006464, 0x9b009b9b, 0x63006363, 0x9d009d9d,
  0xc000c0c0, 0x4b004b4b, 0xb700b7b7, 0xa500a5a5,
  0x89008989, 0x5f005f5f, 0xb100b1b1, 0x17001717,
  0xf400f4f4, 0xbc00bcbc, 0xd300d3d3, 0x46004646,
  0xcf00cfcf, 0x37003737, 0x5e005e5e, 0x47004747,
  0x94009494, 0xfa00fafa, 0xfc00fcfc, 0x5b005b5b,
  0x97009797, 0xfe00fefe, 0x5a005a5a, 0xac00acac,
  0x3c003c3c, 0x4c004c4c, 0x03000303, 0x35003535,
  0xf300f3f3, 0x23002323, 0xb800b8b8, 0x5d005d5d,
  0x6a006a6a, 0x92009292, 0xd500d5d5, 0x21002121,
  0x44004444, 0x51005151, 0xc600c6c6, 0x7d007d7d,
  0x39003939, 0x83008383, 0xdc00dcdc, 0xaa00aaaa,
  0x7c007c7c, 0x77007777, 0x56005656, 0x05000505,
  0x1b001b1b, 0xa400a4a4, 0x15001515, 0x34003434,
  0x1e001e1e, 0x1c001c1c, 0xf800f8f8, 0x52005252,
  0x20002020, 0x14001414, 0xe900e9e9, 0xbd00bdbd,
  0xdd00dddd, 0xe400e4e4, 0xa100a1a1, 0xe000e0e0,
  0x8a008a8a, 0xf100f1f1, 0xd600d6d6, 0x7a007a7a,
  0xbb00bbbb, 0xe300e3e3, 0x40004040, 0x4f004f4f,
};

static const uint64_t sp32bit4404[256] = {
  0x70700038, 0x2c2c0041, 0xb3b30016, 0xc0c00076,
  0xe4e400d9, 0x57570093, 0xeaea0060, 0xaeae00f2,
  0x23230072, 0x6b6b00c2, 0x454500ab, 0xa5a5009a,
  0xeded0075, 0x4f4f0006, 0x1d1d0057, 0x929200a0,
  0x86860091, 0xafaf00f7, 0x7c7c00b5, 0x1f1f00c9,
  0x3e3e00a2, 0xdcdc008c, 0x5e5e00d2, 0x0b0b0090,
  0xa6a600f6, 0x39390007, 0xd5d500a7, 0x5d5d0027,
  0xd9d9008e, 0x5a5a00b2, 0x51510049, 0x6c6c00de,
  0x8b8b0043, 0x9a9a005c, 0xfbfb00d7, 0xb0b000c7,
  0x7474003e, 0x2b2b00f5, 0xf0f0008f, 0x84840067,
  0xdfdf001f, 0xcbcb0018, 0x3434006e, 0x767600af,
  0x6d6d002f, 0xa9a900e2, 0xd1d10085, 0x0404000d,
  0x14140053, 0x3a3a00f0, 0xdede009c, 0x11110065,
  0x323200ea, 0x9c9c00a3, 0x535300ae, 0xf2f2009e,
  0xfefe00ec, 0xcfcf0080, 0xc3c3002d, 0x7a7a006b,
  0x242400a8, 0xe8e8002b, 0x60600036, 0x696900a6,
  0xaaaa00c5, 0xa0a00086, 0xa1a1004d, 0x62620033,
  0x545400fd, 0x1e1e0066, 0xe0e00058, 0x64640096,
  0x1010003a, 0x00000009, 0xa3a30095, 0x75750010,
  0x8a8a0078, 0xe6e600d8, 0x09090042, 0xdddd00cc,
  0x878700ef, 0x83830026, 0xcdcd00e5, 0x90900061,
  0x7373001a, 0xf6f6003f, 0x9d9d003b, 0xbfbf0082,
  0x525200b6, 0xd8d800db, 0xc8c800d4, 0xc6c60098,
  0x818100e8, 0x6f6f008b, 0x13130002, 0x636300eb,
  0xe9e9000a, 0xa7a7002c, 0x9f9f001d, 0xbcbc00b0,
  0x2929006f, 0xf9f9008d, 0x2f2f0088, 0xb4b4000e,
  0x78780019, 0x06060087, 0xe7e7004e, 0x7171000b,
  0xd4d400a9, 0xabab000c, 0x88880079, 0x8d8d0011,
  0x7272007f, 0xb9b90022, 0xf8f800e7, 0xacac0059,
  0x363600e1, 0x2a2a00da, 0x3c3c003d, 0xf1f100c8,
  0x40400012, 0xd3d30004, 0xbbbb0074, 0x43430054,
  0x15150030, 0xadad007e, 0x777700b4, 0x80800028,
  0x82820055, 0xecec0068, 0x27270050, 0xe5e500be,
  0x858500d0, 0x353500c4, 0x0c0c0031, 0x414100cb,
  0xefef002a, 0x939300ad, 0x1919000f, 0x212100ca,
  0x0e0e0070, 0x4e4e00ff, 0x65650032, 0xbdbd0069,
  0xb8b80008, 0x8f8f0062, 0xebeb0000, 0xcece0024,
  0x303000d1, 0x5f5f00fb, 0xc5c500ba, 0x1a1a00ed,
  0xe1e10045, 0xcaca0081, 0x47470073, 0x3d3d006d,
  0x01010084, 0xd6d6009f, 0x565600ee, 0x4d4d004a,
  0x0d0d00c3, 0x6666002e, 0xcccc00c1, 0x2d2d0001,
  0x121200e6, 0x20200025, 0xb1b10048, 0x99990099,
  0x4c4c00b9, 0xc2c200b3, 0x7e7e007b, 0x050500f9,
  0xb7b700ce, 0x313100bf, 0x171700df, 0xd7d70071,
  0x58580029, 0x616100cd, 0x1b1b006c, 0x1c1c0013,
  0x0f0f0064, 0x1616009b, 0x18180063, 0x2222009d,
  0x444400c0, 0xb2b2004b, 0xb5b500b7, 0x919100a5,
  0x08080089, 0xa8a8005f, 0xfcfc00b1, 0x50500017,
  0xd0d000f4, 0x7d7d00bc, 0x898900d3, 0x97970046,
  0x5b5b00cf, 0x95950037, 0xffff005e, 0xd2d20047,
  0xc4c40094, 0x484800fa, 0xf7f700fc, 0xdbdb005b,
  0x03030097, 0xdada00fe, 0x3f3f005a, 0x949400ac,
  0x5c5c003c, 0x0202004c, 0x4a4a0003, 0x33330035,
  0x676700f3, 0xf3f30023, 0x7f7f00b8, 0xe2e2005d,
  0x9b9b006a, 0x26260092, 0x373700d5, 0x3b3b0021,
  0x96960044, 0x4b4b0051, 0xbebe00c6, 0x2e2e007d,
  0x79790039, 0x8c8c0083, 0x6e6e00dc, 0x8e8e00aa,
  0xf5f5007c, 0xb6b60077, 0xfdfd0056, 0x59590005,
  0x9898001b, 0x6a6a00a4, 0x46460015, 0xbaba0034,
  0x2525001e, 0x4242001c, 0xa2a200f8, 0xfafa0052,
  0x07070020, 0x55550014, 0xeeee00e9, 0x0a0a00bd,
  0x494900dd, 0x686800e4, 0x383800a1, 0xa4a400e0,
  0x2828008a, 0x7b7b00f1, 0xc9c900d6, 0xc1c1007a,
  0xe3e300bb, 0xf4f400e3, 0xc7c70040, 0x9e9e004f,
};
#endif

#if !defined(SPEED_PRIORITY_CAMELLIA)
static const uint8_t left_rschd[6]  = {0, 1, 0, 1, 0, 1};
static const uint8_t right_rschd[6] = {1, 0, 1, 0, 1, 0};
#endif

camellia::~camellia() {
  memset(kw_, 0xCC, sizeof(kw_));
  memset(k_, 0xCC, sizeof(k_));
  memset(kl_, 0xCC, sizeof(kl_));
}

int32_t camellia::initialize(const uint8_t *key, const uint32_t ksize) noexcept {
  uint64_t k[4] = {0};

  switch (ksize) {
    case CAMELLIA_128_KEY_BYTE_SIZE:
      BENDIAN_8BIT_TO_64BIT_SIZE128(key, k);
      ksize_ = CAMELLIA_128_KEY_BYTE_SIZE;
      has_subkeys_ = true;
      nk_ = 17;
      nkl_ = 3;
      n6r_ = 2;
      expand_128bit_key(k, kw_, k_, kl_);
      memset(k, 0xCC, 16);
      break;
    case CAMELLIA_192_KEY_BYTE_SIZE:
      BENDIAN_8BIT_TO_64BIT_SIZE192(key, k);
      ksize_ = CAMELLIA_192_KEY_BYTE_SIZE;
      has_subkeys_ = true;
      nk_ = 23;
      nkl_ = 5;
      n6r_ = 3;
      expand_192bit_or_256bit_key(k, kw_, k_, kl_);
      memset(k, 0xCC, 24);
      break;
    case CAMELLIA_256_KEY_BYTE_SIZE:
      BENDIAN_8BIT_TO_64BIT_SIZE256(key, k);
      ksize_ = CAMELLIA_256_KEY_BYTE_SIZE;
      has_subkeys_ = true;
      nk_ = 23;
      nkl_ = 5;
      n6r_ = 3;
      expand_192bit_or_256bit_key(k, kw_, k_, kl_);
      memset(k, 0xCC, 32);
      break;
    default:
      return KEY_SIZE_ERROR;
  }
  return SUCCESS;
}

int32_t camellia::encrypt(const uint8_t * const ptext, uint8_t *ctext) noexcept {
  uint64_t tmptext[2]= {0};
  uint64_t out[2] = {0};
  int32_t kpos = 0, klpos = 0;

  if (false == has_subkeys_) { return UNSET_KEY_ERROR; };

  BENDIAN_8BIT_TO_64BIT_SIZE128(ptext, tmptext);

  tmptext[0] ^= kw_[0];
  tmptext[1] ^= kw_[1];

  for (int32_t round = 0; round <= n6r_; ++round) {
#if defined(SPEED_PRIORITY_CAMELLIA)
    tmptext[1] ^= f_function(tmptext[0], k_[kpos]);
    ++kpos;

    tmptext[0] ^= f_function(tmptext[1], k_[kpos]);
    ++kpos;

    tmptext[1] ^= f_function(tmptext[0], k_[kpos]);
    ++kpos;

    tmptext[0] ^= f_function(tmptext[1], k_[kpos]);
    ++kpos;

    tmptext[1] ^= f_function(tmptext[0], k_[kpos]);
    ++kpos;

    tmptext[0] ^= f_function(tmptext[1], k_[kpos]);
    ++kpos;
#else
    for (int32_t inrnd = 0; inrnd < 6; ++inrnd) {
      tmptext[right_rschd[inrnd]] ^= f_function(tmptext[left_rschd[inrnd]], k_[kpos]);
      ++kpos;
    }
#endif
    if (n6r_ != round) {
      tmptext[0] = fl_function(tmptext[0], kl_[klpos]);
      ++klpos;

      tmptext[1] = inv_fl_function(tmptext[1], kl_[klpos]);
      ++klpos;
    }
  }

  out[0] = tmptext[1] ^ kw_[2];
  out[1] = tmptext[0] ^ kw_[3];

  BENDIAN_64BIT_TO_8BIT_SIZE128(out, ctext);

  return SUCCESS;
}

int32_t camellia::decrypt(const uint8_t * const ctext, uint8_t *ptext) noexcept {
  uint64_t tmptext[2]= {0};
  uint64_t out[2] = {0};
  int32_t kpos = nk_, klpos = nkl_;

  if (false == has_subkeys_) { return UNSET_KEY_ERROR; };

  BENDIAN_8BIT_TO_64BIT_SIZE128(ctext, tmptext);

  tmptext[0] ^= kw_[2];
  tmptext[1] ^= kw_[3];

  for (int32_t round = 0; round <= n6r_; ++round) {

#if defined(SPEED_PRIORITY_CAMELLIA)
    tmptext[1] ^= f_function(tmptext[0], k_[kpos]);
    --kpos;

    tmptext[0] ^= f_function(tmptext[1], k_[kpos]);
    --kpos;

    tmptext[1] ^= f_function(tmptext[0], k_[kpos]);
    --kpos;

    tmptext[0] ^= f_function(tmptext[1], k_[kpos]);
    --kpos;

    tmptext[1] ^= f_function(tmptext[0], k_[kpos]);
    --kpos;

    tmptext[0] ^= f_function(tmptext[1], k_[kpos]);
    --kpos;
#else
    for (int32_t inrnd = 0; inrnd < 6; ++inrnd) {
      tmptext[right_rschd[inrnd]] ^= f_function(tmptext[left_rschd[inrnd]], k_[kpos]);
      --kpos;
    }
#endif
    if (n6r_ != round) {
      tmptext[0] = fl_function(tmptext[0], kl_[klpos]);
      --klpos;

      tmptext[1] = inv_fl_function(tmptext[1], kl_[klpos]);
      --klpos;
    }
  }

  out[0] = tmptext[1] ^ kw_[0];
  out[1] = tmptext[0] ^ kw_[1];

  BENDIAN_64BIT_TO_8BIT_SIZE128(out, ptext);

  return SUCCESS;
}

void camellia::clear() noexcept {
  nk_ = 0;
  nkl_ = 0;
  n6r_ = 0;
  memset(kw_, 0xCC, sizeof(kw_));
  memset(k_, 0xCC, sizeof(k_));
  memset(kl_, 0xCC, sizeof(kl_));
  has_subkeys_ = false;
}

inline void camellia::expand_128bit_key(const uint64_t * const key, uint64_t *kw, uint64_t *k, uint64_t *kl) const noexcept {
  uint64_t kl1[2] = {0};
  uint64_t kl2[2] = {0};
  uint64_t ka1[2] = {0};
  uint64_t ka2[2] = {0};
  uint64_t tk[2] = {0};

  kl1[0] = key[0];
  kl1[1] = key[1];
 
  tk[0] = key[0];
  tk[1] = key[1];

  tk[1] ^= f_function(tk[0], SGM1);
  tk[0] ^= f_function(tk[1], SGM2);

  tk[0] ^= kl1[0];
  tk[1] ^= kl1[1];

  tk[1] ^= f_function(tk[0], SGM3);
  tk[0] ^= f_function(tk[1], SGM4);

  ka1[0] = tk[0];
  ka1[1] = tk[1];

  kw[0] = kl1[0];
  kw[1] = kl1[1];

  k[0] = ka1[0];
  k[1] = ka1[1];
  CAMELLIA_ROTATE_LEFT128(kl1, kl2, 15);  /* kl << 15 */ 
  k[2] = kl2[0];
  k[3] = kl2[1];
  CAMELLIA_ROTATE_LEFT128(ka1, ka2, 15);  /* ka << 15 */ 
  k[4] = ka2[0];
  k[5] = ka2[1];

  CAMELLIA_ROTATE_LEFT128(ka2, ka1, 15);  /* ka << 30 */ 
  kl[0] = ka1[0];
  kl[1] = ka1[1];

  CAMELLIA_ROTATE_LEFT128(kl2, kl1, 30);  /* kl << 45 */ 
  k[6] = kl1[0];
  k[7] = kl1[1];
  CAMELLIA_ROTATE_LEFT128(ka1, ka2, 15);  /* ka << 45 */ 
  k[8] = ka2[0];
  CAMELLIA_ROTATE_LEFT128(kl1, kl2, 15);  /* kl << 60 */ 
  k[9] = kl2[1];
  CAMELLIA_ROTATE_LEFT128(ka2, ka1, 15);  /* ka << 60 */ 
  k[10] = ka1[0];
  k[11] = ka1[1];

  CAMELLIA_ROTATE_LEFT128(kl2, kl1, 17);  /* kl << 77 */ 
  kl[2] = kl1[0];
  kl[3] = kl1[1];

  CAMELLIA_ROTATE_LEFT128(kl1, kl2, 17);  /* kl << 94 */ 
  k[12] = kl2[0];
  k[13] = kl2[1];
  CAMELLIA_ROTATE_LEFT128(ka1, ka2, 34);  /* ka << 94 */ 
  k[14] = ka2[0];
  k[15] = ka2[1];
  CAMELLIA_ROTATE_LEFT128(kl2, kl1, 17);  /* kl << 111 */ 
  k[16] = kl1[0];
  k[17] = kl1[1];

  CAMELLIA_ROTATE_LEFT128(ka2, ka1, 17);  /* ka << 111 */ 
  kw[2] = ka1[0];
  kw[3] = ka1[1];
}

inline void camellia::expand_192bit_or_256bit_key(const uint64_t * const key, uint64_t *kw, uint64_t *k, uint64_t *kl) const noexcept {
  uint64_t kr1[2] = {0};
  uint64_t kl2[2] = {0};
  uint64_t kl1[2] = {0};
  uint64_t kr2[2] = {0};
  uint64_t ka1[2] = {0};
  uint64_t ka2[2] = {0};
  uint64_t kb1[2] = {0};
  uint64_t kb2[2] = {0};
  uint64_t tk[2] = {0};
  
  if (ksize_ == CAMELLIA_192_KEY_BYTE_SIZE) {
    kl1[0] = key[0];
    kl1[1] = key[1];
    kr1[0] = key[2];
    kr1[1] = ~key[2];
  } else {
    kl1[0] = key[0];
    kl1[1] = key[1];
    kr1[0] = key[2];
    kr1[1] = key[3];
  }

  tk[0] = kl1[0] ^ kr1[0];
  tk[1] = kl1[1] ^ kr1[1];

  tk[1] ^= f_function(tk[0], SGM1);
  tk[0] ^= f_function(tk[1], SGM2);

  tk[0] ^= kl1[0];
  tk[1] ^= kl1[1];

  tk[1] ^= f_function(tk[0], SGM3);
  tk[0] ^= f_function(tk[1], SGM4);

  ka1[0] = tk[0]; 
  ka1[1] = tk[1]; 

  tk[0] ^= kr1[0];
  tk[1] ^= kr1[1];

  tk[1] ^= f_function(tk[0], SGM5);
  tk[0] ^= f_function(tk[1], SGM6);

  kb1[0] = tk[0]; 
  kb1[1] = tk[1]; 

  kw[0] = kl1[0];
  kw[1] = kl1[1];
  
  k[0] = kb1[0];
  k[1] = kb1[1];
  CAMELLIA_ROTATE_LEFT128(kr1, kr2, 15);   /* kr << 15 */ 
  k[2] = kr2[0];
  k[3] = kr2[1];
  CAMELLIA_ROTATE_LEFT128(ka1, ka2, 15);   /* ka << 15 */ 
  k[4] = ka2[0];
  k[5] = ka2[1];

  CAMELLIA_ROTATE_LEFT128(kr2, kr1, 15);   /* kr << 30 */ 
  kl[0] = kr1[0];
  kl[1] = kr1[1];

  CAMELLIA_ROTATE_LEFT128(kb1, kb2, 30);   /* kb << 30 */ 
  k[6] = kb2[0];
  k[7] = kb2[1];
  CAMELLIA_ROTATE_LEFT128(kl1, kl2, 45);   /* kl << 45 */ 
  k[8] = kl2[0];
  k[9] = kl2[1];
  CAMELLIA_ROTATE_LEFT128(ka2, ka1, 30);   /* ka << 45 */ 
  k[10] = ka1[0];
  k[11] = ka1[1];

  CAMELLIA_ROTATE_LEFT128(kl2, kl1, 15);   /* kl << 60 */ 
  kl[2] = kl1[0];
  kl[3] = kl1[1];

  CAMELLIA_ROTATE_LEFT128(kr1, kr2, 30);   /* kr << 60 */ 
  k[12] = kr2[0];
  k[13] = kr2[1];
  CAMELLIA_ROTATE_LEFT128(kb2, kb1, 30);   /* kb << 60 */ 
  k[14] = kb1[0];
  k[15] = kb1[1];
  CAMELLIA_ROTATE_LEFT128(kl1, kl2, 17);   /* kl << 77 */ 
  k[16] = kl2[0];
  k[17] = kl2[1];

  CAMELLIA_ROTATE_LEFT128(ka1, ka2, 32);   /* ka << 77 */ 
  kl[4] = ka2[0];
  kl[5] = ka2[1];

  CAMELLIA_ROTATE_LEFT128(kr2, kr1, 34);   /* kr << 94 */ 
  k[18] = kr1[0];
  k[19] = kr1[1];
  CAMELLIA_ROTATE_LEFT128(ka2, ka1, 17);   /* ka << 94 */ 
  k[20] = ka1[0];
  k[21] = ka1[1];
  CAMELLIA_ROTATE_LEFT128(kl2, kl1, 34);   /* kl << 111 */ 
  k[22] = kl1[0];
  k[23] = kl1[1];

  CAMELLIA_ROTATE_LEFT128(kb1, kb2, 51);   /* kb << 111 */ 
  kw[2] = kb2[0];
  kw[3] = kb2[1];
}

inline uint64_t camellia::f_function(uint64_t in, uint64_t key) const noexcept {
  uint64_t tmpy = 0;
  uint64_t zd = 0;
#if !defined(SPEED_PRIORITY_CAMELLIA)
  uint8_t y[8] = {0};
#endif

  tmpy = in ^ key;

#if defined(SPEED_PRIORITY_CAMELLIA)
  zd ^= sp64bit1[(uint8_t)(tmpy >> 56) & 0xFF];
  zd ^= sp64bit2[(uint8_t)(tmpy >> 48) & 0xFF];
  zd ^= sp64bit3[(uint8_t)(tmpy >> 40) & 0xFF];
  zd ^= sp64bit4[(uint8_t)(tmpy >> 32) & 0xFF];
  zd ^= sp64bit5[(uint8_t)(tmpy >> 24) & 0xFF];
  zd ^= sp64bit6[(uint8_t)(tmpy >> 16) & 0xFF];
  zd ^= sp64bit7[(uint8_t)(tmpy >>  8) & 0xFF];
  zd ^= sp64bit8[(uint8_t)(tmpy)       & 0xFF];

  return zd;
#else
  endian<BIG, uint64_t, 8>::convert(&tmpy, y);

  s_function(y);
  p_function(y);

  endian<BIG, uint64_t, 8>::convert(y, &zd);

  return zd;
#endif
}

inline uint64_t camellia::fl_function(const uint64_t x, const uint64_t kl) const noexcept {
  uint32_t xl = (uint32_t)(x >> 32);
  uint32_t xr = (uint32_t)(x & 0x00000000FFFFFFFF);

  xr ^= ROTATE_LEFT32((xl & (uint32_t)(kl >> 32)), 1);
  xl ^= (xr | (uint32_t)(kl & 0x00000000FFFFFFFF));
 
  return (((uint64_t)xl << 32) | (uint64_t)xr); 
}

inline uint64_t camellia::inv_fl_function(const uint64_t y, const uint64_t kl) const noexcept {
  uint32_t yl = (uint32_t)(y >> 32);
  uint32_t yr = (uint32_t)(y & 0x00000000FFFFFFFF);

  yl ^= (yr | (uint32_t)(kl & 0x00000000FFFFFFFF));
  yr ^= ROTATE_LEFT32((yl & (uint32_t)(kl >> 32)), 1);

  return (((uint64_t)yl << 32) | (uint64_t)yr); 
}

#if 0
inline void camellia::s_function(uint8_t *x) const noexcept {
  uint64_t tmpy = 0;

  tmpy ^= sp64bit1[x[0]];
  tmpy ^= sp64bit2[x[1]];
  tmpy ^= sp64bit3[x[2]];
  tmpy ^= sp64bit4[x[3]];
  tmpy ^= sp64bit5[x[4]];
  tmpy ^= sp64bit6[x[5]];
  tmpy ^= sp64bit7[x[6]];
  tmpy ^= sp64bit8[x[7]];

  endian<BIG, uint64_t, 8>::convert(&tmpy, x);
}
#endif

#if !defined(SPEED_PRIORITY_CAMELLIA)
inline void camellia::s_function(uint8_t *x) const noexcept {
  x[0] = sbox1[x[0]];
  x[1] = sbox2[x[1]];
  x[2] = sbox3[x[2]];
  x[3] = sbox4[x[3]];
  x[4] = sbox2[x[4]];
  x[5] = sbox3[x[5]];
  x[6] = sbox4[x[6]];
  x[7] = sbox1[x[7]];
}

inline void camellia::p_function(uint8_t *x) const noexcept {
  uint8_t out[8] = {0};

  out[0] = x[0] ^        x[2] ^ x[3] ^        x[5] ^ x[6] ^ x[7];
  out[1] = x[0] ^ x[1] ^        x[3] ^ x[4] ^        x[6] ^ x[7];
  out[2] = x[0] ^ x[1] ^ x[2] ^        x[4] ^ x[5] ^        x[7];
  out[3] =        x[1] ^ x[2] ^ x[3] ^ x[4] ^ x[5] ^ x[6];
  out[4] = x[0] ^ x[1] ^                      x[5] ^ x[6] ^ x[7];
  out[5] =        x[1] ^ x[2] ^        x[4] ^        x[6] ^ x[7];
  out[6] =               x[2] ^ x[3] ^ x[4] ^ x[5] ^        x[7];
  out[7] = x[0] ^               x[3] ^ x[4] ^ x[5] ^ x[6];

  memcpy(x, out, 8);
}
#endif

}